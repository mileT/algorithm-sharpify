(self.webpackChunkleetcode_notes_doc=self.webpackChunkleetcode_notes_doc||[]).push([[8218],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return d},kt:function(){return m}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=u(t),m=i,f=c["".concat(s,".").concat(m)]||c[m]||p[m]||a;return t?r.createElement(f,o(o({ref:n},d),{},{components:t})):r.createElement(f,o({ref:n},d))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var u=2;u<a;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},9717:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return o},metadata:function(){return l},toc:function(){return s},default:function(){return d}});var r=t(2122),i=t(9756),a=(t(7294),t(3905)),o={sidebar_label:"1. Number of Islands ",sidebar_position:1},l={unversionedId:"DFS/200 number of islands",id:"DFS/200 number of islands",isDocsHomePage:!1,title:"Leetcode 200",description:"Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.",source:"@site/docs/DFS/200 number of islands.md",sourceDirName:"DFS",slug:"/DFS/200 number of islands",permalink:"/algorithm-sharpify/docs/DFS/200 number of islands",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/DFS/200 number of islands.md",version:"current",sidebar_label:"1. Number of Islands ",sidebarPosition:1,frontMatter:{sidebar_label:"1. Number of Islands ",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"211. Design Add and Search Words Data Structure",permalink:"/algorithm-sharpify/docs/leetcode/leetcode211"},next:{title:"39. Combination Sum",permalink:"/algorithm-sharpify/docs/DFS/4 permutations"}},s=[{value:"Solution",id:"solution",children:[{value:"Java",id:"java",children:[]},{value:"BFS",id:"bfs",children:[]}]}],u={toc:s};function d(e){var n=e.components,t=(0,i.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Given an ",(0,a.kt)("inlineCode",{parentName:"p"},"m x n")," 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands."),(0,a.kt)("p",null,"An ",(0,a.kt)("strong",{parentName:"p"},"island")," is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'Input: grid = [\n  ["1","1","1","1","0"],\n  ["1","1","0","1","0"],\n  ["1","1","0","0","0"],\n  ["0","0","0","0","0"]\n]\nOutput: 1\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'Input: grid = [\n  ["1","1","0","0","0"],\n  ["1","1","0","0","0"],\n  ["0","0","1","0","0"],\n  ["0","0","0","1","1"]\n]\nOutput: 3\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"Input: nums = [3,3], target = 6\nOutput: [0,1]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constrains:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"m == grid.length")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"n == grid[i].length")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= m, n <= 300")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"grid[i][j] is '0' or '1'."))),(0,a.kt)("h2",{id:"solution"},"Solution"),(0,a.kt)("h3",{id:"java"},"Java"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n\n\n}\n")),(0,a.kt)("h3",{id:"bfs"},"BFS"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class Solution {\n    int[][] dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};\n    public int numIslands(char[][] grid) {\n        if(grid == 0 || grid.length == 0) {\n            return 0;\n        }\n        int islands = 0;\n        for(int i = 0; i < grid.length; i++) {\n            for(int j = 0; j <grid[0].length; j++) {\n                if(grid[i][j] == '1') {\n                    islands++;\n                    BFS(grid, i, j);\n                }\n            }\n        }\n        return islands;\n    }\n\n    private void BFS(char[][] grid, int x, int y) {\n        grid[x][y] = '0';\n        Queue<Point> q = new LinkedList<Point>();\n        q.offer(new Point(x, y));\n        while(q.size() > 0) {\n            int size = q.size();\n            Point p = q.poll();\n            for(int i = 0; i < size; i++) {\n                for(int[] dir : dirs) {\n                    int x1 = p.x + dir[0];\n                    int y1 = p.y + dir[1];\n                    if(x1 >= 0 && y1 >= 0 && x1 < grid.length && y1 < grid[0].length && grid[x1][y1] =='1') {\n                        grid[x1][y1] = '0';\n                        q.offer(new Point(x1, y1));\n                    }\n                }\n            }\n        }\n    }\n}\n")))}d.isMDXComponent=!0}}]);