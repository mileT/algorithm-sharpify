(self.webpackChunkleetcode_notes_doc=self.webpackChunkleetcode_notes_doc||[]).push([[9631],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=s(n),f=o,m=p["".concat(c,".").concat(f)]||p[f]||d[f]||i;return n?r.createElement(m,l(l({ref:t},u),{},{components:n})):r.createElement(m,l({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,l=new Array(i);l[0]=p;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,l[1]=a;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1346:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return a},toc:function(){return c},default:function(){return u}});var r=n(2122),o=n(9756),i=(n(7294),n(3905)),l={sidebar_label:"92 Reverse Linked List II",sidebar_position:92},a={unversionedId:"leetcode/leetcode92",id:"leetcode/leetcode92",isDocsHomePage:!1,title:"Reverse Linked List II",description:"Leetcode Link",source:"@site/docs/leetcode/leetcode92.md",sourceDirName:"leetcode",slug:"/leetcode/leetcode92",permalink:"/algorithm-sharpify/docs/leetcode/leetcode92",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/leetcode/leetcode92.md",version:"current",sidebar_label:"92 Reverse Linked List II",sidebarPosition:92,frontMatter:{sidebar_label:"92 Reverse Linked List II",sidebar_position:92},sidebar:"tutorialSidebar",previous:{title:"Largest Rectangle in Histogram",permalink:"/algorithm-sharpify/docs/leetcode/leetcode84"},next:{title:"Find Minimum in Rotated Sorted Array",permalink:"/algorithm-sharpify/docs/leetcode/leetcode153"}},c=[{value:"Description",id:"description",children:[]},{value:"Solution",id:"solution",children:[]},{value:"Code",id:"code",children:[{value:"solution 1: Iterative Way",id:"solution-1-iterative-way",children:[]}]}],s={toc:c};function u(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/reverse-linked-list-ii/"},"Leetcode Link")),(0,i.kt)("h2",{id:"description"},"Description"),(0,i.kt)("p",null,"Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"}," Example 1:")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2021/02/19/rev2ex2.jpg",alt:"image",title:"Example 1 iamge"})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"Input: head = [1,2,3,4,5], left = 2, right = 4\nOutput: [1,4,3,2,5]\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"}," Example 2: ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"Input: head = [5], left = 1, right = 1\nOutput: [5]\n")),(0,i.kt)("p",null,"Constraints:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"The number of nodes in the list is n.\n1 <= n <= 500\n-500 <= Node.val <= 500\n1 <= left <= right <= n\n")),(0,i.kt)("h2",{id:"solution"},"Solution"),(0,i.kt)("h2",{id:"code"},"Code"),(0,i.kt)("h3",{id:"solution-1-iterative-way"},"solution 1: Iterative Way"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public ListNode reverseBetween(ListNode head, int left, int right) {\n        if(head == null) {\n            return null;\n        }\n        // Node cur, prev to the start postion\n        ListNode cur = head, prev = null;\n        while(m > 1) {\n            prev = cur;\n            cur = cur.next;\n            m--;\n            n--;\n        }\n        //Two pointers will do the fianl link\n        ListNode con = prev, tail = cur;\n        ListNode third = null;\n        while(n > 0) {\n            third = cur.next;\n            cur.next = prev;\n            prev = cur;\n            cur = third;\n            n--;\n        }\n\n        if(con != null) {\n            con.next = prev;\n        } else {\n            head = prev;\n        }\n\n        tail.next = cur;\n        return head;\n    }\n}\n")))}u.isMDXComponent=!0}}]);