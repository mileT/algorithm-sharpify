(self.webpackChunkleetcode_notes_doc=self.webpackChunkleetcode_notes_doc||[]).push([[6502],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return u},kt:function(){return m}});var s=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,s,r=function(e,n){if(null==e)return{};var t,s,r={},i=Object.keys(e);for(s=0;s<i.length;s++)t=i[s],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(s=0;s<i.length;s++)t=i[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=s.createContext({}),c=function(e){var n=s.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=c(e.components);return s.createElement(p.Provider,{value:n},e.children)},I={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},l=s.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),l=c(t),m=r,d=l["".concat(p,".").concat(m)]||l[m]||I[m]||i;return t?s.createElement(d,a(a({ref:n},u),{},{components:t})):s.createElement(d,a({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=l;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,a[1]=o;for(var c=2;c<i;c++)a[c]=t[c];return s.createElement.apply(null,a)}return s.createElement.apply(null,t)}l.displayName="MDXCreateElement"},8774:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return a},metadata:function(){return o},toc:function(){return p},default:function(){return u}});var s=t(2122),r=t(9756),i=(t(7294),t(3905)),a={},o={unversionedId:"DFS/1 subset",id:"DFS/1 subset",isDocsHomePage:!1,title:"1 subset",description:"`java",source:"@site/docs/DFS/1 subset.md",sourceDirName:"DFS",slug:"/DFS/1 subset",permalink:"/algorithm-sharpify/docs/DFS/1 subset",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/DFS/1 subset.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"39. Combination Sum",permalink:"/algorithm-sharpify/docs/DFS/3 combination sum"},next:{title:"2 subset 2",permalink:"/algorithm-sharpify/docs/DFS/2 subset 2"}},p=[],c={toc:p};function u(e){var n=e.components,t=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,s.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    List<List<Integer>> output = new ArrayList<>();\n    int n, k;\n\n    public void backtack(int first, ArrayList<Integer> curr, int[] nums) {\n        if(curr.size() == k) {\n            output.add(new ArrayList(curr));\n            return;\n        }\n        for(int i = first; i < n; i++) {\n            curr.add(nums[i]);\n            backtack(i + 1, curr, nums);\n            curr.remove(curr.size() - 1);\n        }\n    }\n\n    public List<List<Integer>> subsets(int[] nums) {\n        n = nums.length;\n        for(k = 0; k < n; k++) {\n            backtrack(0, new ArrayList<Integer>(), nums);\n        }\n        return output;\n    }\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"public void backtrack(List<List<Integer>> list, List<Integer> current, int[] nums, int start) {\n    list.add(new ArrayList<>(current));\n    for(int i = start; i < nums.length; i++) {\n        current.add(nums[i]);\n        backtrack(list, current, nums, i + 1);\n        current.remove(current.size() - 1);\n    }\n}\npublic List<List<Integer>> subsets(int[] nums) {\n    List<List<Integer>> result = new ArrayList<>();\n    Arrays.sort(nums);\n    backtrack(result, new ArrayList<Integer>(), nums, 0);\n    return result;\n}\n")),(0,i.kt)("p",null,"SELECT sI.pairID, sI.flowcellID, sI.testType, sI.yieldMB, sI.numReads, sI.perQ30Bases, sI.peralignment, sI.perPCRdup,\nsI.perAlignedUnique, sI.snpTiTvRatio, sI.sampleID, sI.annotateID, sI.filterID, sI.postprocID, sI.gender,\nsI.notes, sI.time, sI.analysisFinishedTime, sI.postprocID, sI.diagnosis,\nsI.diagnosisFound, sI.geneDiscovery, sI.meanCvgGP, sI.uniformityCvgGP, sI.nSNPGP, sI.nINDELGP, sI.perbasesAbove1XGP,\nsI.perbasesAbove10XGP, sI.perbasesAbove20XGP, sI.perbasesAbove30XGP, sI.genePanelVer, sI.pipeID, sI.pipeThing1Ver,\nsI.pipeHPFVer, sI.webVer, sI.displayed_at, sI.machine, sI.currentStatus,sI.specimen,sI.tmb_pct10,sI.tmb_pct10_np,sI.tmb_pct5_np,\nsS.din, sI.captureKit\nFROM\nsampleInfo sI, sampleSheet sS\nWHERE sI.sampleID = '$mysampleID' AND sI.postprocID = '$mypostprocID1' AND sI.sampleID = sS.sampleID  AND sI.flowcellID = sS.flowcell_ID;"),(0,i.kt)("p",null,"SELECT sI.pairID, sI.flowcellID, sI.testType, sI.yieldMB, sI.numReads, sI.perQ30Bases, sI.peralignment, sI.perPCRdup,\nsI.perAlignedUnique, sI.snpTiTvRatio, sI.sampleID, sI.annotateID, sI.filterID, sI.postprocID, sI.gender,\nsI.notes, sI.time, sI.analysisFinishedTime, sI.postprocID, sI.diagnosis,\nsI.diagnosisFound, sI.geneDiscovery, sI.meanCvgGP, sI.uniformityCvgGP, sI.nSNPGP, sI.nINDELGP, sI.perbasesAbove1XGP,\nsI.perbasesAbove10XGP, sI.perbasesAbove20XGP, sI.perbasesAbove30XGP, sI.genePanelVer, sI.pipeID, sI.pipeThing1Ver,\nsI.pipeHPFVer, sI.webVer, sI.displayed_at, sI.machine, sI.currentStatus,sI.specimen,sI.tmb_pct10,sI.tmb_pct10_np,\nsI.tmb_pct5_np,sS.din,\nIFNULL(sI.captureKit, 'NA') as capture_kit\nFROM\nsampleInfo sI, sampleSheet sS\nWHERE sI.sampleID = '$mysampleID' AND sI.postprocID = '$mypostprocID1' AND sI.sampleID = sS.sampleID  AND sI.flowcellID = sS.flowcell_ID;\";\n// WHERE sI.sampleID = '$mysampleID' AND sI.postprocID = '$mypostprocID1';"),(0,i.kt)("p",null,"The GLIS test codes are listed below:\nK048010 - Cancer NGS Panel - Germline - SNV/Indels\nK048020 - Cancer NGS Panel - Germline - CNV\nK048110 - Cancer NGS Panel - Tumour - SNV/Indels\nK048120 - Cancer NGS Panel - Tumour \u2013 CNV"))}u.isMDXComponent=!0}}]);