(self.webpackChunkleetcode_notes_doc=self.webpackChunkleetcode_notes_doc||[]).push([[8972],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return c}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=u(n),c=a,f=m["".concat(s,".").concat(c)]||m[c]||p[c]||i;return n?r.createElement(f,o(o({ref:t},d),{},{components:n})):r.createElement(f,o({ref:t},d))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},491:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return l},toc:function(){return s},default:function(){return d}});var r=n(2122),a=n(9756),i=(n(7294),n(3905)),o={sidebar_label:"33. Search in Rotated Sorted Array",sidebar_position:10},l={unversionedId:"blind-curated-75/10 search in rotated sorted array",id:"blind-curated-75/10 search in rotated sorted array",isDocsHomePage:!1,title:"33. Search in Rotated Sorted Array",description:"There is an integer array nums sorted in ascending order (with distinct values).",source:"@site/docs/blind-curated-75/10 search in rotated sorted array.md",sourceDirName:"blind-curated-75",slug:"/blind-curated-75/10 search in rotated sorted array",permalink:"/algorithm-sharpify/docs/blind-curated-75/10 search in rotated sorted array",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/blind-curated-75/10 search in rotated sorted array.md",version:"current",sidebar_label:"33. Search in Rotated Sorted Array",sidebarPosition:10,frontMatter:{sidebar_label:"33. Search in Rotated Sorted Array",sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"9 merge k sorted lists",permalink:"/algorithm-sharpify/docs/blind-curated-75/9 merge k sorted lists"},next:{title:"39. Combination Sum",permalink:"/algorithm-sharpify/docs/blind-curated-75/11 combination sum"}},s=[{value:"Solution",id:"solution",children:[{value:"Java",id:"java",children:[]}]}],u={toc:s};function d(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"There is an integer array ",(0,i.kt)("inlineCode",{parentName:"p"},"nums")," sorted in ascending order (with distinct values)."),(0,i.kt)("p",null,"Prior to being passed to your function, ",(0,i.kt)("inlineCode",{parentName:"p"},"nums")," is possibly rotated at an unknown pivot index ",(0,i.kt)("inlineCode",{parentName:"p"},"k (1 <= k < nums"),".length) such that the resulting array is ",(0,i.kt)("inlineCode",{parentName:"p"},"[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]")," (0-indexed). For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"[0,1,2,4,5,6,7]")," might be rotated at pivot index 3 and become ",(0,i.kt)("inlineCode",{parentName:"p"},"[4,5,6,7,0,1,2]"),"."),(0,i.kt)("p",null,"Given the array ",(0,i.kt)("inlineCode",{parentName:"p"},"nums")," after the possible rotation and an integer ",(0,i.kt)("inlineCode",{parentName:"p"},"target"),", return the index of target if it is in ",(0,i.kt)("inlineCode",{parentName:"p"},"nums"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"-1")," if it is not in ",(0,i.kt)("inlineCode",{parentName:"p"},"nums"),"."),(0,i.kt)("p",null,"You must write an algorithm with ",(0,i.kt)("inlineCode",{parentName:"p"},"O(log n)")," runtime complexity."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"Input: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"Input: nums = [4,5,6,7,0,1,2], target = 3\nOutput: -1\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 3:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"Input: nums = [1], target = 0\nOutput: -1\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constrains:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 5000")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"104 <= nums[i] <= 104")),(0,i.kt)("li",{parentName:"ul"},"All values of nums are unique."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nums")," is an ascending array that is possibly rotated."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-104 <= target <= 104"))),(0,i.kt)("h2",{id:"solution"},"Solution"),(0,i.kt)("h3",{id:"java"},"Java"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public int search(int[] nums, int target) {\n        int start = 0;\n        int end = nums.length - 1;\n        while(start <= end) {\n            int mid = start + (end - start) / 2;\n            if(nums[mid] == target) {\n                return mid;\n            }\n\n            if(nums[start] <= nums[mid]) {\n                if(target >= nums[start] && target < nums[mid]) {\n                    end = mid - 1;\n                } else {\n                    start = mid + 1;\n                }\n\n            }\n\n            if(nums[mid] <= nums[end]) {\n                if(target > nums[mid] && target <= nums[end]) {\n                    start = mid + 1;\n                } else {\n                    end = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n\n}\n")))}d.isMDXComponent=!0}}]);