(self.webpackChunkleetcode_notes_doc=self.webpackChunkleetcode_notes_doc||[]).push([[3390],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return p},kt:function(){return d}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),m=l(t),d=i,f=m["".concat(s,".").concat(d)]||m[d]||c[d]||a;return t?r.createElement(f,o(o({ref:n},p),{},{components:t})):r.createElement(f,o({ref:n},p))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=m;var u={};for(var s in n)hasOwnProperty.call(n,s)&&(u[s]=n[s]);u.originalType=e,u.mdxType="string"==typeof e?e:i,o[1]=u;for(var l=2;l<a;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5538:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return o},metadata:function(){return u},toc:function(){return s},default:function(){return p}});var r=t(2122),i=t(9756),a=(t(7294),t(3905)),o={sidebar_label:"46. Permutations",sidebar_position:4},u={unversionedId:"DFS/4 permutations",id:"DFS/4 permutations",isDocsHomePage:!1,title:"39. Combination Sum",description:"Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.",source:"@site/docs/DFS/4 permutations.md",sourceDirName:"DFS",slug:"/DFS/4 permutations",permalink:"/algorithm-sharpify/docs/DFS/4 permutations",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/DFS/4 permutations.md",version:"current",sidebar_label:"46. Permutations",sidebarPosition:4,frontMatter:{sidebar_label:"46. Permutations",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Leetcode 200",permalink:"/algorithm-sharpify/docs/DFS/200 number of islands"},next:{title:"39. Combination Sum",permalink:"/algorithm-sharpify/docs/DFS/3 combination sum"}},s=[{value:"Solution",id:"solution",children:[{value:"Java",id:"java",children:[]}]}],l={toc:s};function p(e){var n=e.components,t=(0,i.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"Input: nums = [1,2,3]\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"Input: nums = [0,1]\nOutput: [[0,1],[1,0]]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"Input: nums = [1]\nOutput: [[1]]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constrains:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 6")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-10 <= nums[i] <= 10")),(0,a.kt)("li",{parentName:"ul"},"All the integers of nums are unique.")),(0,a.kt)("h2",{id:"solution"},"Solution"),(0,a.kt)("h3",{id:"java"},"Java"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public List<List<Integer>> permute(int[] nums) {\n        List<List<Integer>> result = new ArrayList<>();\n        permute(nums, 0, result);\n        return result;\n    }\n    public void permute(int[] nums, int begin, List<List<Integer>> result) {\n        if(begin >= nums.length) {\n            List<Integer> list = new ArrayList<Integer>();\n            for(int i = 0; i < nums.length; i++) {\n                list.add(nums[i]);\n            }\n            result.add(list);\n            return;\n        }\n        for(int i = begin; i < nums.length; i++) {\n            swap(nums, begin, i);\n            permute(nums, begin + 1; result);\n            swap(nums, i, begin);\n        }\n    }\n    public void swasp(int[] nums, int i, int j) {\n        int temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n    }\n}\n")))}p.isMDXComponent=!0}}]);