(self.webpackChunkleetcode_notes_doc=self.webpackChunkleetcode_notes_doc||[]).push([[7162],{3905:function(n,e,t){"use strict";t.d(e,{Zo:function(){return u},kt:function(){return h}});var r=t(7294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var a=r.createContext({}),c=function(n){var e=r.useContext(a),t=e;return n&&(t="function"==typeof n?n(e):s(s({},e),n)),t},u=function(n){var e=c(n.components);return r.createElement(a.Provider,{value:e},n.children)},d={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},p=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,o=n.originalType,a=n.parentName,u=l(n,["components","mdxType","originalType","parentName"]),p=c(t),h=i,f=p["".concat(a,".").concat(h)]||p[h]||d[h]||o;return t?r.createElement(f,s(s({ref:e},u),{},{components:t})):r.createElement(f,s({ref:e},u))}));function h(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var o=t.length,s=new Array(o);s[0]=p;var l={};for(var a in e)hasOwnProperty.call(e,a)&&(l[a]=e[a]);l.originalType=n,l.mdxType="string"==typeof n?n:i,s[1]=l;for(var c=2;c<o;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},9413:function(n,e,t){"use strict";t.r(e),t.d(e,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return a},default:function(){return u}});var r=t(2122),i=t(9756),o=(t(7294),t(3905)),s={sidebar_label:"51 N-Queens",sidebar_position:1},l={unversionedId:"leetcode/leetcode51",id:"leetcode/leetcode51",isDocsHomePage:!1,title:"N-Queens",description:"Description",source:"@site/docs/leetcode/leetcode51.md",sourceDirName:"leetcode",slug:"/leetcode/leetcode51",permalink:"/algorithm-sharpify/docs/leetcode/leetcode51",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/leetcode/leetcode51.md",version:"current",sidebar_label:"51 N-Queens",sidebarPosition:1,frontMatter:{sidebar_label:"51 N-Queens",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"recursion2",permalink:"/algorithm-sharpify/docs/lai-algorithm/recursion2"},next:{title:"N-Queens",permalink:"/algorithm-sharpify/docs/leetcode/leetcode576"}},a=[{value:"Description",id:"description",children:[]},{value:"Solution",id:"solution",children:[]},{value:"Code",id:"code",children:[{value:"solution 1",id:"solution-1",children:[]}]}],c={toc:a};function u(n){var e=n.components,t=(0,i.Z)(n,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"description"},"Description"),(0,o.kt)("p",null,"The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other."),(0,o.kt)("p",null,"Given an integer n, return all distinct solutions to the n-queens puzzle."),(0,o.kt)("p",null,"Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"}," Example 1:")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/11/13/queens.jpg",alt:"image",title:"Example 1 iamge"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'Input: n = 4\nOutput: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]\nExplanation: There exist two distinct solutions to the 4-queens puzzle as shown above\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"}," Example 2: ")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'Input: n = 1\nOutput: [["Q"]]\n')),(0,o.kt)("p",null,"Constraints:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"1 <= n <= 9\n")),(0,o.kt)("h2",{id:"solution"},"Solution"),(0,o.kt)("h2",{id:"code"},"Code"),(0,o.kt)("h3",{id:"solution-1"},"solution 1"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"public class Solution {\n    public List<List<String>> solveNQueen(int n) {\n        char[][] board = new char[n][n];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                board[i][j] = '.';\n            }\n        }\n        List<List<String>> result = new ArrayList<List<String>>();\n        dfs(board, 0, reslt);\n        result result;\n\n    }\n\n    private void dfs(char[][] board, int col, List<List<String>> result) {\n        if(col == board.length) {\n            result.add(construct(board));\n            return;\n        }\n\n        for(int i = 0; i < board.length; i++) {\n            if(validate(board, i, col)) {\n                board[i][col] = 'Q';\n                dfs(board, col + 1; result);\n                board[i][col] = '.';\n            }\n        }\n    }\n\n    private boolean validate(char[][] board, int x, int y) {\n        for(int i = 0; i < board.length; i++) {\n            for(int j = 0; j < y; j++) {\n                if(board[i][j] == 'Q' && (x == i || x - i == y -j || x - i = j - y )) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    private List<List<String>> construct(char[][] board) {\n        List<String> result = new LinkedList<String>();\n        for(int i = 0; i < board.length; i++) {\n            String s = new String(board[i]);\n            result.add(s);\n        }\n        return result;\n    }\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'class Solution {\n    int rows[];\n    int hills[];\n    int dales[];\n    int n;\n    List<List<String>> output = new ArrayList();\n    // queens positions\n    int queens[];\n    \n    public boolean isNotUnderAttack(int row, int col) {\n        int res = rows[col] + hills[row -col + 2 * n] + dales[row + col];\n        return res == 0;\n    }\n    \n    public void placeQueen(int row, int col) {\n        queens[row] = col;\n        rows[col] = 1;\n        hills[row - col + 2 * n] = 1;\n        dales[row + col] = 1;\n    }\n    \n    public void removeQueen(int row, int col) {\n        queens[row] = 0;\n        rows[col] = 0;\n        hills[row - col + 2 * n] = 0;\n        dales[row + col] = 0;\n    }\n    \n    public void backtrack(int row) {\n        for(int col = 0; col < n; col++) {\n            if(isNotUnderAttack(row, col)) {\n                placeQueen(row, col);\n                if(row + 1 == n) {\n                    addSolution();\n                } else {\n                    backtrack(row + 1);\n                }\n                removeQueen(row, col);\n            }\n        }\n    }\n    \n    public void addSolution() {\n        List<String> solution = new ArrayList<String>();\n        for(int i = 0; i < n; i++) {\n            int col = queens[i];\n            StringBuilder sb = new StringBuilder();\n            for(int j = 0; j < col; j++) {\n                sb.append(".");\n            }\n            sb.append("Q");\n            for(int j = col + 1; j < n; j++) {\n                sb.append(".");\n            }\n            solution.add(sb.toString());\n        }\n        output.add(solution);\n    }\n    \n    public List<List<String>> solveNQueens(int n) {\n        this.n = n;\n        rows = new int[n];\n        hills = new int[4 * n - 1];\n        dales = new int[2 * n - 1];\n        queens = new int[n];\n        backtrack(0);\n        return output;\n        \n    }\n}\n')),(0,o.kt)("p",null,"Solution 2:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public List<List<String>> solveNQueens(int n) {\n        char[][] chess = new char[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                chess[i][j] = '.';\n            }\n        }\n        List<List<String>> res = new ArrayList<List<String>>();\n\n        solve(res, chess, 0);\n        return res;\n    }\n    private void solve(List<List<String>> res, char[][] chess, int row) {\n        if (row == chess.length) {\n            res.add(construct(chess));\n            return;\n        }\n        for (int col = 0; col < chess.length; col++) {\n            if (valid(chess, row, col)) {\n                chess[row][col] = 'Q';\n                solve(res, chess, row + 1);\n                chess[row][col] = '.';\n            }\n        }\n    }\n    private boolean valid(char[][] chess, int row, int col) {\n        // check all cols\n        for (int i = 0; i < row; i++) {\n            if (chess[i][col] == 'Q') {\n                return false;\n            }\n        }\n        //check 45 degree\n        for (int i = row - 1, j = col + 1; i >= 0 && j < chess.length; i--, j++) {\n            if (chess[i][j] == 'Q') {\n                return false;\n            }\n        }\n        //check 135\n        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {\n            if (chess[i][j] == 'Q') {\n                return false;\n            }\n        }\n        return true;\n    }\n    private List<String> construct(char[][] chess) {\n        List<String> path = new ArrayList<>();\n        for (int i = 0; i < chess.length; i++) {\n            path.add(new String(chess[i]));\n        }\n        return path;\n    }\n}\n")))}u.isMDXComponent=!0}}]);