(self.webpackChunkleetcode_notes_doc=self.webpackChunkleetcode_notes_doc||[]).push([[9333],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=u(n),d=a,f=m["".concat(l,".").concat(d)]||m[d]||c[d]||i;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5767:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return s},toc:function(){return l},default:function(){return p}});var r=n(2122),a=n(9756),i=(n(7294),n(3905)),o={sidebar_label:"69 Top K Frequent Elements",sidebar_position:70},s={unversionedId:"blind-curated-75/69 top K frequent elements",id:"blind-curated-75/69 top K frequent elements",isDocsHomePage:!1,title:"347. Top K Frequent Elements",description:"Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.",source:"@site/docs/blind-curated-75/69 top K frequent elements.md",sourceDirName:"blind-curated-75",slug:"/blind-curated-75/69 top K frequent elements",permalink:"/algorithm-sharpify/docs/blind-curated-75/69 top K frequent elements",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/blind-curated-75/69 top K frequent elements.md",version:"current",sidebar_label:"69 Top K Frequent Elements",sidebarPosition:70,frontMatter:{sidebar_label:"69 Top K Frequent Elements",sidebar_position:70},sidebar:"tutorialSidebar",previous:{title:"Lint 431. Connected Component in Undirected Graph",permalink:"/algorithm-sharpify/docs/blind-curated-75/67 number of connected componets in an undirected graph"},next:{title:"371. Sum of Two Integers",permalink:"/algorithm-sharpify/docs/blind-curated-75/70 sum of two integers"}},l=[],u={toc:l};function p(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [1,1,1,2,2,3], k = 2\nOutput: [1,2]\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [1], k = 1\nOutput: [1]\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"1 <= nums.length <= 105"),(0,i.kt)("li",{parentName:"ul"},"k is in the range ","[1, the number of unique elements in the array]","."),(0,i.kt)("li",{parentName:"ul"},"It is guaranteed that the answer is unique.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Follow up"),": Your algorithm's time complexity must be better than O(n log n), where n is the array's size."),(0,i.kt)("h1",{id:"solution-1"},"Solution 1"),(0,i.kt)("p",null,"Similar idea as quick sort."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public int[] topKFrequent(int[] nums, int k) {\n        HashMap<Integer, Integer> map = new HashMap<> ();\n        for(int num: nums) {\n            map.put(num, map.getOrDefault(num, 0) + 1);\n        }\n        return quickSelect(map, new ArrayList<Integer>(map.keySet()), 0, map.size() - 1, k);\n    }\n\n    private int[] quickSelect(HashMap<Integer, Integer> map, ArrayList<Integer> keys, int start, int end, int k) {\n        int left = start, right = end;\n        List<Integer> res = new ArrayList<> ();\n\n        while(left < right) {\n            int pivot = partition(map, keys, left, right);\n            if(pivot < k - 1) {\n                left = pivot + 1;\n            } else if(pivot > k - 1) {\n                right = pivot - 1;\n            } else {\n                break;\n            }\n        }\n\n        for(int i = 0; i < k; i++) {\n            res.add(keys.get(i));\n        }\n        \n        return res.stream().mapToInt(Integer::intValue).toArray();\n    }\n\n    private int partition(HashMap<Integer, Integer> map, ArrayList<Integer> keys, int start, int end) {\n        int left = start;\n        int pivot = map.get(keys.get(start));\n        for(int i = start + 1; i <= end; i++) {\n            if(map.get(keys.get(i)) >= pivot) {\n                Collections.swap(keys, i, ++left);\n            }\n        }\n        Collections.swap(keys, start, left);\n        return left;\n    }\n}\n")),(0,i.kt)("p",null,"How to convert ",(0,i.kt)("inlineCode",{parentName:"p"},"List<Integer>")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"int[]"),"?"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"List<Integer> result = new ArrayList<>();\nint[] resultArray = result.stream().mapToInt(Integer::intValue).toArray();\nint[] resultArray = result.stream().mapToInt(Integer::intValue).toArray():\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"\nprivate int partition(HashMap<Integer, Integer> map, ArrayList<Integer> keys, int start, int end) {\n    int left = start;\n    int pivot = map.get(keys.get(start));\n    for(int i = start + 1; i <= end; i++) {\n        if(map.get(keys.get(i))>= pivot) {\n            Collections.swap(keys, i, left);\n        }    \n    }\n    Collections.swap(keys, start, left);\n    return left;\n\n}\n")))}p.isMDXComponent=!0}}]);