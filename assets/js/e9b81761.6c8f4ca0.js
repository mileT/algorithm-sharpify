(self.webpackChunkleetcode_notes_doc=self.webpackChunkleetcode_notes_doc||[]).push([[9689],{3905:function(e,n,r){"use strict";r.d(n,{Zo:function(){return s},kt:function(){return h}});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function d(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=t.createContext({}),c=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},s=function(e){var n=c(e.components);return t.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),p=c(r),h=o,f=p["".concat(l,".").concat(h)]||p[h]||u[h]||a;return r?t.createElement(f,i(i({ref:n},s),{},{components:r})):t.createElement(f,i({ref:n},s))}));function h(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=p;var d={};for(var l in n)hasOwnProperty.call(n,l)&&(d[l]=n[l]);d.originalType=e,d.mdxType="string"==typeof e?e:o,i[1]=d;for(var c=2;c<a;c++)i[c]=r[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},265:function(e,n,r){"use strict";r.r(n),r.d(n,{frontMatter:function(){return i},metadata:function(){return d},toc:function(){return l},default:function(){return s}});var t=r(2122),o=r(9756),a=(r(7294),r(3905)),i={sidebar_label:"211 Design Add and Search Words Data Structure",sidebar_position:211},d={unversionedId:"leetcode/leetcode211",id:"leetcode/leetcode211",isDocsHomePage:!1,title:"211. Design Add and Search Words Data Structure",description:"Description",source:"@site/docs/leetcode/leetcode211.md",sourceDirName:"leetcode",slug:"/leetcode/leetcode211",permalink:"/algorithm-sharpify/docs/leetcode/leetcode211",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/leetcode/leetcode211.md",version:"current",sidebar_label:"211 Design Add and Search Words Data Structure",sidebarPosition:211,frontMatter:{sidebar_label:"211 Design Add and Search Words Data Structure",sidebar_position:211},sidebar:"tutorialSidebar",previous:{title:"Find Minimum in Rotated Sorted Array",permalink:"/algorithm-sharpify/docs/leetcode/leetcode153"},next:{title:"Leetcode 200",permalink:"/algorithm-sharpify/docs/DFS/200 number of islands"}},l=[{value:"Description",id:"description",children:[]},{value:"Solution",id:"solution",children:[]},{value:"Code",id:"code",children:[{value:"solution",id:"solution-1",children:[]}]}],c={toc:l};function s(e){var n=e.components,r=(0,o.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,t.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"description"},"Description"),(0,a.kt)("p",null,"Design a data structure that supports adding new words and finding if a string matches any previously added string."),(0,a.kt)("p",null,"Implement the WordDictionary class:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"WordDictionary() Initializes the object."),(0,a.kt)("li",{parentName:"ul"},"void addWord(word) Adds word to the data structure, it can be matched later."),(0,a.kt)("li",{parentName:"ul"},"bool search(word) Returns true if there is any string in the data structure that matches word or false otherwise. word may contain dots '.' where dots can be matched with any letter.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"}," Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'Input\n["WordDictionary","addWord","addWord","addWord","search","search","search","search"]\n[[],["bad"],["dad"],["mad"],["pad"],["bad"],[".ad"],["b.."]]\nOutput\n[null,null,null,null,false,true,true,true]\n\nExplanation\nWordDictionary wordDictionary = new WordDictionary();\nwordDictionary.addWord("bad");\nwordDictionary.addWord("dad");\nwordDictionary.addWord("mad");\nwordDictionary.search("pad"); // return False\nwordDictionary.search("bad"); // return True\nwordDictionary.search(".ad"); // return True\nwordDictionary.search("b.."); // return True\n')),(0,a.kt)("p",null,"Constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= word.length <= 500")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"word")," in addWord consists lower-case English letters."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"word")," in search consist of  '.' or lower-case English letters."),(0,a.kt)("li",{parentName:"ul"},"At most 50000 calls will be made to addWord and search.")),(0,a.kt)("h2",{id:"solution"},"Solution"),(0,a.kt)("h2",{id:"code"},"Code"),(0,a.kt)("h3",{id:"solution-1"},"solution"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class WordDictionary:\n\n    def _init_(self):\n        self.root = {}\n\n    def addWord(self, word):\n        node = self.root\n        for char in word:\n            node = node.setdefault(char, {})\n        node[None] = None\n\n    def search(self, word):\n        def find(word, node):\n            if not word:\n                return None in node\n            char, word = word[0], word[1:]\n            if char != '.':\n                return char in node and find(word, node[char])\n            return any(find(word, kid) for kid in node.values() if kid)\n        return find(word, self.root)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public Class WordDictionary {\n    public class TrieNode {\n        public TrieNode[] children = new TrieNode[26];\n        public String item = \"\";\n    }\n\n    private TrieNode root = new TrieNode();\n\n    public void addWord(String word) {\n        TrieNode node = root;\n        for(char c : word.toCharArray()) {\n            if(node.children[c - 'a'] == null) {\n                node.children[c - 'a'] = new TrieNode();\n            }\n            node = node.children[c - 'a'];\n        }\n        node.item = word;\n    }\n\n    public boolean search(String word) {\n        return match(word.toCharArray(), 0, root);\n    }\n\n    private boolean match(char[] chs, int k, TrieNode node) {\n        if(k == chs.length) {\n            return !node.item.equals(\"\");\n        } \n        if(chs[k] != '.') {\n            return node.children[chs[k] - 'a'] != null && match(chs, k + 1, node.children[chs[k] - 'a']);\n        } else {\n            for(int i = 0; i < node.children.length; i++) {\n                if(node.children[i] != null) {\n                    if(match(chs, k + 1, node.children[i])) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n}\n")))}s.isMDXComponent=!0}}]);