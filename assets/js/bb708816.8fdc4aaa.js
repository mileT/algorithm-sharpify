(self.webpackChunkleetcode_notes_doc=self.webpackChunkleetcode_notes_doc||[]).push([[785],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return s},kt:function(){return f}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),p=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=p(e.components);return r.createElement(u.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(t),f=a,m=d["".concat(u,".").concat(f)]||d[f]||c[f]||i;return t?r.createElement(m,o(o({ref:n},s),{},{components:t})):r.createElement(m,o({ref:n},s))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1740:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return o},metadata:function(){return l},toc:function(){return u},default:function(){return s}});var r=t(2122),a=t(9756),i=(t(7294),t(3905)),o={sidebar_label:"62 Perfect Squares",sidebar_position:62},l={unversionedId:"blind-curated-75/62 perfect squares",id:"blind-curated-75/62 perfect squares",isDocsHomePage:!1,title:"659 Encode and Decode Strings",description:"Given an integer n, return the least number of perfect square numbers that sum to n.",source:"@site/docs/blind-curated-75/62 perfect squares.md",sourceDirName:"blind-curated-75",slug:"/blind-curated-75/62 perfect squares",permalink:"/algorithm-sharpify/docs/blind-curated-75/62 perfect squares",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/blind-curated-75/62 perfect squares.md",version:"current",sidebar_label:"62 Perfect Squares",sidebarPosition:62,frontMatter:{sidebar_label:"62 Perfect Squares",sidebar_position:62},sidebar:"tutorialSidebar",previous:{title:"659 Encode and Decode Strings",permalink:"/algorithm-sharpify/docs/blind-curated-75/61 encode and decode strings"},next:{title:"295 Find Median from Data Stream",permalink:"/algorithm-sharpify/docs/blind-curated-75/63 find median from data stream"}},u=[{value:"Solution",id:"solution",children:[{value:"DP solution1",id:"dp-solution1",children:[]},{value:"DP solution 2",id:"dp-solution-2",children:[]}]}],p={toc:u};function s(e){var n=e.components,t=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Given an integer ",(0,i.kt)("inlineCode",{parentName:"p"},"n"),", return the least number of perfect square numbers that sum to ",(0,i.kt)("inlineCode",{parentName:"p"},"n"),"."),(0,i.kt)("p",null,"A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"1, 4, 9, and 16")," are perfect squares while ",(0,i.kt)("inlineCode",{parentName:"p"},"3")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"11")," are not."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"Input: n = 12\nOutput: 3\nExplanation: 12 = 4 + 4 + 4.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"Input: n = 13\nOutput: 2\nExplanation: 13 = 4 + 9.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constrains")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"1 <= n <= 10^4\n")),(0,i.kt)("h2",{id:"solution"},"Solution"),(0,i.kt)("h3",{id:"dp-solution1"},"DP solution1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"public class Solution {\n    public int numSquares(int n) {\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n        for(int i = 0; i <= n; i++) {\n            for(int j = 1; i + j * j <= n; j++) {\n                dp[i + j * j] = Math.min(dp[i + j * j], dp[i] + 1);\n            }\n        }\n        return dp[n];\n    }\n}\n")),(0,i.kt)("h3",{id:"dp-solution-2"},"DP solution 2"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"public int numSquares(int n) {\n    int[] dp = new int[n + 1];\n    Arrays.fill(dp, Integer.MAX_VALUE);\n    dp[0] = 0;\n    for(int i = 1; i <= n; i++) {\n        int min = Integer.MAX_VALUE;\n        int j = 1;\n        while( i - j * j >= 0) {\n            min = Math.min(min, dp[i - j * j] + 1);\n            j++;\n        }\n        dp[i] = min;\n    }\n    return dp[n];\n}\n")))}s.isMDXComponent=!0}}]);