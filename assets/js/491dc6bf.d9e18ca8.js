(self.webpackChunkleetcode_notes_doc=self.webpackChunkleetcode_notes_doc||[]).push([[3683],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return d},kt:function(){return f}});var r=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=u(t),f=l,h=c["".concat(s,".").concat(f)]||c[f]||p[f]||o;return t?r.createElement(h,a(a({ref:n},d),{},{components:t})):r.createElement(h,a({ref:n},d))}));function f(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=t.length,a=new Array(o);a[0]=c;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:l,a[1]=i;for(var u=2;u<o;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},7573:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return a},metadata:function(){return i},toc:function(){return s},default:function(){return d}});var r=t(2122),l=t(9756),o=(t(7294),t(3905)),a={sidebar_label:"1469. Find All The Lonely Nodes ",sidebar_position:1},i={unversionedId:"BFS/1469 Find All The Lonely Nodes",id:"BFS/1469 Find All The Lonely Nodes",isDocsHomePage:!1,title:"Leetcode 1469",description:"In a binary tree, a lonely node is a node that is the only child of its parent node. The root of the tree is not lonely because it does not have a parent node.",source:"@site/docs/BFS/1469 Find All The Lonely Nodes.md",sourceDirName:"BFS",slug:"/BFS/1469 Find All The Lonely Nodes",permalink:"/algorithm-sharpify/docs/BFS/1469 Find All The Lonely Nodes",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/BFS/1469 Find All The Lonely Nodes.md",version:"current",sidebar_label:"1469. Find All The Lonely Nodes ",sidebarPosition:1,frontMatter:{sidebar_label:"1469. Find All The Lonely Nodes ",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"2 subset 2",permalink:"/algorithm-sharpify/docs/DFS/2 subset 2"},next:{title:"\u4e2d\u56fd\u7b7e\u8bc1\u4e2d\u5fc3\u9012\u4ea4\u62a4\u7167",permalink:"/algorithm-sharpify/docs/Canada-\u7b7e\u8bc1\u7a0e\u52a1/\u4e2d\u56fd\u7b7e\u8bc1\u4e2d\u5fc3\u9012\u4ea4\u62a4\u7167"}},s=[{value:"Solution",id:"solution",children:[{value:"BFS",id:"bfs",children:[]},{value:"Recursive",id:"recursive",children:[]}]}],u={toc:s};function d(e){var n=e.components,t=(0,l.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In a binary tree, a lonely node is a node that is the only child of its parent node. The root of the tree is not lonely because it does not have a parent node."),(0,o.kt)("p",null,"Given the root of a binary tree, return an array containing the values of all lonely nodes in the tree. Return the list in any order."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/06/03/e1.png",alt:"example 1"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"Input: root = [1,2,3,null,4]\nOutput: [4]\nExplanation: Light blue node is the only lonely node.\nNode 1 is the root and is not lonely.\nNodes 2 and 3 have the same parent and are not lonely.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/06/03/e2.png",alt:"example 2"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"Input: root = [7,1,4,6,null,5,3,null,null,null,null,null,2]\nOutput: [6,2]\nExplanation: Light blue nodes are lonely nodes.\nPlease remember that order doesn't matter, [2,6] is also an acceptable answer.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 3:")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/06/03/e3.png",alt:"example 3"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"Input: root = [11,99,88,77,null,null,66,55,null,null,44,33,null,null,22]\nOutput: [77,55,33,66,44,22]\nExplanation: Nodes 99 and 88 share the same parent. Node 11 is the root.\nAll other nodes are lonely.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constrains:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The number of nodes in the tree is in the range ","[1, 1000]","."),(0,o.kt)("li",{parentName:"ul"},"1 <= Node.val <= 106")),(0,o.kt)("h2",{id:"solution"},"Solution"),(0,o.kt)("h3",{id:"bfs"},"BFS"),(0,o.kt)("p",null,"Version 1 - BFS"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> getLonelyNodes(TreeNode root) {\n        List<Integer> result = new ArrayList<>();\n        if(root == null) {\n            return result;\n        }\n        LinkedList<TreeNode> q = new LinkedList<>();\n        q.add(root);\n        TreeNode current;\n        while(!q.isEmpty()) {\n            current = q.removeFirst();\n            if(current != null) {\n                if(current.left != null && current.right != null) {\n                    //TreeNode temp = current.left != null\n                    q.add(current.left);\n                    q.add(current.right);\n                    continue;\n                } else if(current.left != null || current.right != null) {\n                    TreeNode temp = current.left != null ? current.left :current.right;\n                    result.add(temp.val);\n                    q.add(temp);\n                }\n            }\n        }\n        return result;\n        \n    }\n}\n\n")),(0,o.kt)("h3",{id:"recursive"},"Recursive"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public List<Integer> getLonelyNodes(TreeNode root) {\n        ArrayList<Integer> result = new ArrayList<>();\n        helper(root, null, result);\n        return result;\n    }\n    \n    void helper(TreeNode root, TreeNode parent, ArrayList<Integer> result) {\n        if(root == null) {\n            return;\n        }\n        if(parent != null && (parent.left == null || parent.right == null)) {\n            result.add(root.val);\n        }\n        helper(root.left, root, result);\n        helper(root.right, root, result);\n    }\n}\n")),(0,o.kt)("p",null,"Version2"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"public List<Integer> getLonelyNodes(TreeNode root) {\n    List<Integer> result = new ArrayList<>();\n    getLonelyNodes(root, false, nodes);\n    return nodes;\n}\n\npublic void getLonelyNodes(TreeNode root, boolean isLonely, List<Integer> nodes) {\n    if(root == null) {\n        return;\n    }\n    if(isLonely) {\n        nodes.add(root.val);\n    }\n    getLonelyNodes(root.left, root.right == null, nodes);\n    getLonelyNodes(root.right, root.left == null, nodes);\n}\n")),(0,o.kt)("p",null,"Version3 - DFS"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"public List<Integer> getLonelyNodes(TreeNode root) {\n    List<Integer> result = new ArrayList<>();\n    if(root == null) {\n        return result;\n    }\n}\npublic void dfs(TreeNode node, List<Integer> res) {\n    if(node.left == null && node.right == null) {\n        return;\n    }\n    if(node.left != null && node.right != null) {\n        dfs(node.left, res);\n        dfs(node.right, res);\n    } else if(node.left != null) {\n        res.add(node.left.val);\n        dfs(node.left, res);\n    } else {\n        res.add(node.right.val);\n        dfs(node.right, res);\n    }\n}\n")))}d.isMDXComponent=!0}}]);