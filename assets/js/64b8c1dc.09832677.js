(self.webpackChunkleetcode_notes_doc=self.webpackChunkleetcode_notes_doc||[]).push([[6552],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),h=s(n),m=a,d=h["".concat(c,".").concat(m)]||h[m]||u[m]||i;return n?r.createElement(d,o(o({ref:t},p),{},{components:n})):r.createElement(d,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=h;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3174:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return l},toc:function(){return c},default:function(){return p}});var r=n(2122),a=n(9756),i=(n(7294),n(3905)),o={sidebar_label:"11. Container With Most Water",sidebar_position:3},l={unversionedId:"blind-curated-75/4 container with most water",id:"blind-curated-75/4 container with most water",isDocsHomePage:!1,title:"11. Container With Most Water",description:"Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.",source:"@site/docs/blind-curated-75/4 container with most water.md",sourceDirName:"blind-curated-75",slug:"/blind-curated-75/4 container with most water",permalink:"/algorithm-sharpify/docs/blind-curated-75/4 container with most water",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/blind-curated-75/4 container with most water.md",version:"current",sidebar_label:"11. Container With Most Water",sidebarPosition:3,frontMatter:{sidebar_label:"11. Container With Most Water",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"5. Longest Palindromic Substring",permalink:"/algorithm-sharpify/docs/blind-curated-75/3 longest palindromic substring"},next:{title:"15. 3Sum",permalink:"/algorithm-sharpify/docs/blind-curated-75/5 three sum"}},c=[{value:"Solution",id:"solution",children:[]}],s={toc:c};function p(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Given ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," non-negative integers ",(0,i.kt)("inlineCode",{parentName:"p"},"a1, a2, ..., an")," , where each represents a point at coordinate ",(0,i.kt)("inlineCode",{parentName:"p"},"(i, ai)"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," vertical lines are drawn such that the two endpoints of the line ",(0,i.kt)("inlineCode",{parentName:"p"},"i")," is at ",(0,i.kt)("inlineCode",{parentName:"p"},"(i, ai)")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"(i, 0)"),". Find two lines, which, together with the x-axis forms a container, such that the container contains the most water."),(0,i.kt)("p",null,"Notice that you may not slant the container."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"Input: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"Input: height = [1,1]\nOutput: 1\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 3:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"Input: height = [4,3,2,1,4]\nOutput: 16\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 4:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: height = [1,2,1]\nOutput: 2\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constrains:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"n == height.length")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"2 <= n <= 105")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0 <= height[i] <= 104"))),(0,i.kt)("h2",{id:"solution"},"Solution"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public int maxArea(int[] height) {\n        int maxArea = 0, l = 0, r = height.length - 1;\n        while(l < r) {\n            maxArea = Math.max(maxArea, Math.min(height[l], height[r]) * (r - l));\n            if(height[l] < height[r]) {\n                l++;\n            } else {\n                r--;\n            }\n        }\n        return maxArea;\n    }\n}\n")))}p.isMDXComponent=!0}}]);