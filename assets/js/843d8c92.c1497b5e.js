(self.webpackChunkleetcode_notes_doc=self.webpackChunkleetcode_notes_doc||[]).push([[4190],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,u=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=l(n),d=i,f=c["".concat(u,".").concat(d)]||c[d]||m[d]||a;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=c;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2500:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return s},toc:function(){return u},default:function(){return p}});var r=n(2122),i=n(9756),a=(n(7294),n(3905)),o={sidebar_label:"39. Combination Sum",sidebar_position:11},s={unversionedId:"DFS/3 combination sum",id:"DFS/3 combination sum",isDocsHomePage:!1,title:"39. Combination Sum",description:"There is an integer array nums sorted in ascending order (with distinct values).",source:"@site/docs/DFS/3 combination sum.md",sourceDirName:"DFS",slug:"/DFS/3 combination sum",permalink:"/algorithm-sharpify/docs/DFS/3 combination sum",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/DFS/3 combination sum.md",version:"current",sidebar_label:"39. Combination Sum",sidebarPosition:11,frontMatter:{sidebar_label:"39. Combination Sum",sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"39. Combination Sum",permalink:"/algorithm-sharpify/docs/DFS/4 permutations"},next:{title:"1 subset",permalink:"/algorithm-sharpify/docs/DFS/1 subset"}},u=[{value:"Solution",id:"solution",children:[{value:"Java",id:"java",children:[]}]}],l={toc:u};function p(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"There is an integer array ",(0,a.kt)("inlineCode",{parentName:"p"},"nums")," sorted in ascending order (with distinct values)."),(0,a.kt)("p",null,"Prior to being passed to your function, ",(0,a.kt)("inlineCode",{parentName:"p"},"nums")," is possibly rotated at an unknown pivot index ",(0,a.kt)("inlineCode",{parentName:"p"},"k (1 <= k < nums"),".length) such that the resulting array is ",(0,a.kt)("inlineCode",{parentName:"p"},"[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]")," (0-indexed). For example, ",(0,a.kt)("inlineCode",{parentName:"p"},"[0,1,2,4,5,6,7]")," might be rotated at pivot index 3 and become ",(0,a.kt)("inlineCode",{parentName:"p"},"[4,5,6,7,0,1,2]"),"."),(0,a.kt)("p",null,"Given the array ",(0,a.kt)("inlineCode",{parentName:"p"},"nums")," after the possible rotation and an integer ",(0,a.kt)("inlineCode",{parentName:"p"},"target"),", return the index of target if it is in ",(0,a.kt)("inlineCode",{parentName:"p"},"nums"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"-1")," if it is not in ",(0,a.kt)("inlineCode",{parentName:"p"},"nums"),"."),(0,a.kt)("p",null,"You must write an algorithm with ",(0,a.kt)("inlineCode",{parentName:"p"},"O(log n)")," runtime complexity."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"Input: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"Input: nums = [4,5,6,7,0,1,2], target = 3\nOutput: -1\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"Input: nums = [1], target = 0\nOutput: -1\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constrains:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 5000")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"104 <= nums[i] <= 104")),(0,a.kt)("li",{parentName:"ul"},"All values of nums are unique."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"nums")," is an ascending array that is possibly rotated."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-104 <= target <= 104"))),(0,a.kt)("h2",{id:"solution"},"Solution"),(0,a.kt)("h3",{id:"java"},"Java"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> current = new ArrayList<Integer>();\n        dfs(candidates, target, 0, result, current);\n        return result;\n    }\n\n    private void dfs(int[] nums, int target, int start, List<List<Integer>> result, List<Integer> currentList) {\n        if(target == 0) {\n            result.add(new ArrayList<>(currentList));\n            return;\n        }\n        for(int i = start; i < nums.length; i++) {\n            if(target - nums[i] < 0) {\n                continue;\n            }\n            currentList.add(nums[i]);\n            dfs(nums, target - nums[i], i, result, currentList);\n            currentList.remove(currentList.size() - 1);\n        }\n    }\n\n}\n")))}p.isMDXComponent=!0}}]);