(self.webpackChunkleetcode_notes_doc=self.webpackChunkleetcode_notes_doc||[]).push([[567],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return s},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),d=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=d(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=d(n),f=o,m=p["".concat(c,".").concat(f)]||p[f]||u[f]||i;return n?r.createElement(m,a(a({ref:t},s),{},{components:n})):r.createElement(m,a({ref:t},s))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=p;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var d=2;d<i;d++)a[d]=n[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6521:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return a},metadata:function(){return l},toc:function(){return c},default:function(){return s}});var r=n(2122),o=n(9756),i=(n(7294),n(3905)),a={sidebar_label:"79 Word Search",sidebar_position:79},l={unversionedId:"leetcode/leetcode79",id:"leetcode/leetcode79",isDocsHomePage:!1,title:"Word Search",description:"Description",source:"@site/docs/leetcode/leetcode79.md",sourceDirName:"leetcode",slug:"/leetcode/leetcode79",permalink:"/algorithm-sharpify/docs/leetcode/leetcode79",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/leetcode/leetcode79.md",version:"current",sidebar_label:"79 Word Search",sidebarPosition:79,frontMatter:{sidebar_label:"79 Word Search",sidebar_position:79},sidebar:"tutorialSidebar",previous:{title:"Top K Frequent Elements",permalink:"/algorithm-sharpify/docs/leetcode/leetcode347"},next:{title:"Reverse Linked List II",permalink:"/algorithm-sharpify/docs/leetcode/leetcode92"}},c=[{value:"Description",id:"description",children:[]},{value:"Solution",id:"solution",children:[]},{value:"Code",id:"code",children:[{value:"solution DFS",id:"solution-dfs",children:[]}]}],d={toc:c};function s(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"description"},"Description"),(0,i.kt)("p",null,"Given an ",(0,i.kt)("inlineCode",{parentName:"p"},"m x n")," grid of characters board and a string word, return true if word exists in the grid."),(0,i.kt)("p",null,"The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"}," Example 1:")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/11/13/queens.jpg",alt:"image",title:"Example 1 iamge"})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'Input: n = 4\nOutput: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]\nExplanation: There exist two distinct solutions to the 4-queens puzzle as shown above\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"}," Example 2: ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'Input: n = 1\nOutput: [["Q"]]\n')),(0,i.kt)("p",null,"Constraints:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"1 <= n <= 9\n")),(0,i.kt)("h2",{id:"solution"},"Solution"),(0,i.kt)("h2",{id:"code"},"Code"),(0,i.kt)("h3",{id:"solution-dfs"},"solution DFS"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"public class Solution {\n    static boolean[][] visited;\n    public boolean exist(char[][] board, String word) {\n        visited = new boolean[board.length][board[0].length];\n        \n        for(int i = 0; i < board.length; i++){\n            for(int j = 0; j < board[i].length; j++){\n                if((word.charAt(0) == board[i][j]) && search(board, word, i, j, 0)){\n                    return true;\n                }\n            }\n        }\n        \n        return false;\n    }\n    \n    private boolean search(char[][]board, String word, int i, int j, int index){\n        if(index == word.length()){\n            return true;\n        }\n        \n        if(i >= board.length || i < 0 || j >= board[i].length || j < 0 || board[i][j] != word.charAt(index) || visited[i][j]){\n            return false;\n        }\n        \n        visited[i][j] = true;\n        if(search(board, word, i-1, j, index+1) || \n           search(board, word, i+1, j, index+1) ||\n           search(board, word, i, j-1, index+1) || \n           search(board, word, i, j+1, index+1)){\n            return true;\n        }\n        \n        visited[i][j] = false;\n        return false;\n    }\n}\n\n")))}s.isMDXComponent=!0}}]);