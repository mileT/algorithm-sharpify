(self.webpackChunkleetcode_notes_doc=self.webpackChunkleetcode_notes_doc||[]).push([[3170],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return l},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),p=u(t),f=o,m=p["".concat(c,".").concat(f)]||p[f]||s[f]||i;return t?r.createElement(m,a(a({ref:n},l),{},{components:t})):r.createElement(m,a({ref:n},l))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=p;var d={};for(var c in n)hasOwnProperty.call(n,c)&&(d[c]=n[c]);d.originalType=e,d.mdxType="string"==typeof e?e:o,a[1]=d;for(var u=2;u<i;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},7319:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return a},metadata:function(){return d},toc:function(){return c},default:function(){return l}});var r=t(2122),o=t(9756),i=(t(7294),t(3905)),a={sidebar_label:"67_A Number of Connected Components in an Undirected Graph",sidebar_position:71},d={unversionedId:"blind-curated-75/A number of connected componets in an undirected graph",id:"blind-curated-75/A number of connected componets in an undirected graph",isDocsHomePage:!1,title:"Leetcode 323. Connected Component in Undirected Graph",description:"Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to find the number of connected components in an undirected graph.",source:"@site/docs/blind-curated-75/67_A number of connected componets in an undirected graph.md",sourceDirName:"blind-curated-75",slug:"/blind-curated-75/A number of connected componets in an undirected graph",permalink:"/algorithm-sharpify/docs/blind-curated-75/A number of connected componets in an undirected graph",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/blind-curated-75/67_A number of connected componets in an undirected graph.md",version:"current",sidebar_label:"67_A Number of Connected Components in an Undirected Graph",sidebarPosition:71,frontMatter:{sidebar_label:"67_A Number of Connected Components in an Undirected Graph",sidebar_position:71},sidebar:"tutorialSidebar",previous:{title:"371. Sum of Two Integers",permalink:"/algorithm-sharpify/docs/blind-curated-75/70 sum of two integers"},next:{title:"417. Pacific Atlantic Water Flow",permalink:"/algorithm-sharpify/docs/blind-curated-75/71 pacific atlantic water flow"}},c=[{value:"Solution",id:"solution",children:[]}],u={toc:c};function l(e){var n=e.components,t=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Given ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," nodes labeled from ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"n - 1")," and a list of undirected edges (each edge is a pair of nodes), write a function to find the number of connected components in an undirected graph."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"    0          3\n    |          |\n    1 --- 2    4\n")),(0,i.kt)("p",null,"Given ",(0,i.kt)("inlineCode",{parentName:"p"},"n = 5")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"edges = [[0, 1], [1, 2], [3, 4]]"),", return ",(0,i.kt)("inlineCode",{parentName:"p"},"2"),"."),(0,i.kt)("h2",{id:"solution"},"Solution"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Definition for Undirected graph.\n * class UndirectedGraphNode {\n *     int label;\n *     ArrayList<UndirectedGraphNode> neighbors;\n *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }\n * };\n */\n public class Solution {\n     public List<List<Integer>> connectedSet(ArrayList<UndirectedGraphNode> nodes) {\n         List<List<Integer>> result = new ArrayList<>();\n         if(nodes == null) {\n             return result;\n         }\n         Map<UndirectedGraphNode, Boolean> visited = new HashMap();\n         for(UndirectedGraphNode node : nodes) {\n             visited.put(node, false);\n         }\n\n         for(UndirectedGraphNode node : nodes) {\n             if(visited.get(node) == false) {\n                 helper(node, visited, result);\n             }\n         }\n\n         return result;\n     }\n\n     private void helper(UndirectedGraphNode node, Map<UndirectedGraphNode, Boolean> visited, List<List<Integer>> result) {\n         ArrayList<Integer> row = new ArrayList();\n         Queue<UndirectedGraphNode> queue = new LinkedList<UndirectedGraphNode>();\n         queue.ofer(node);\n         visited.put(node, true);\n\n         while(!queue.isEmpty()) {\n             UndirectedGraphNode head = queue.poll();\n             row.add(head.label);\n             for(UndirectedGraphNode nei : head.neighbors) {\n                 if(visted.get(nei) == fasle) {\n                     queue.offer(nei);\n                     visited.put(nei, true);\n                 }\n             }\n         }\n         Collections.sort(row);\n         result.add(row);\n     }\n }\n\n")))}l.isMDXComponent=!0}}]);