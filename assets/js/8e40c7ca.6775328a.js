(self.webpackChunkleetcode_notes_doc=self.webpackChunkleetcode_notes_doc||[]).push([[4160],{3905:function(n,e,t){"use strict";t.d(e,{Zo:function(){return c},kt:function(){return m}});var r=t(7294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var s=r.createContext({}),u=function(n){var e=r.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},c=function(n){var e=u(n.components);return r.createElement(s.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,a=n.originalType,s=n.parentName,c=l(n,["components","mdxType","originalType","parentName"]),d=u(t),m=i,b=d["".concat(s,".").concat(m)]||d[m]||p[m]||a;return t?r.createElement(b,o(o({ref:e},c),{},{components:t})):r.createElement(b,o({ref:e},c))}));function m(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var a=t.length,o=new Array(a);o[0]=d;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=n,l.mdxType="string"==typeof n?n:i,o[1]=l;for(var u=2;u<a;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},506:function(n,e,t){"use strict";t.r(e),t.d(e,{frontMatter:function(){return o},metadata:function(){return l},toc:function(){return s},default:function(){return c}});var r=t(2122),i=t(9756),a=(t(7294),t(3905)),o={sidebar_label:"75 Palindromic Substrings",sidebar_position:75},l={unversionedId:"blind-curated-75/75 palindromic substrings",id:"blind-curated-75/75 palindromic substrings",isDocsHomePage:!1,title:"647. Palindromic Substrings",description:"Given a string s, return the number of palindromic substrings in it.",source:"@site/docs/blind-curated-75/75 palindromic substrings.md",sourceDirName:"blind-curated-75",slug:"/blind-curated-75/75 palindromic substrings",permalink:"/algorithm-sharpify/docs/blind-curated-75/75 palindromic substrings",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/blind-curated-75/75 palindromic substrings.md",version:"current",sidebar_label:"75 Palindromic Substrings",sidebarPosition:75,frontMatter:{sidebar_label:"75 Palindromic Substrings",sidebar_position:75},sidebar:"tutorialSidebar",previous:{title:"424. Longest Repeating Character Replacement",permalink:"/algorithm-sharpify/docs/blind-curated-75/72 longest repeating character replacement"},next:{title:"516. Longest Palindromic Subsequence",permalink:"/algorithm-sharpify/docs/blind-curated-75/76 longest palindromic subsequence"}},s=[{value:"Solution",id:"solution",children:[]}],u={toc:s};function c(n){var e=n.components,t=(0,i.Z)(n,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Given a string ",(0,a.kt)("inlineCode",{parentName:"p"},"s"),", return the number of palindromic substrings in it."),(0,a.kt)("p",null,"A string is a palindrome when it reads the same backward as forward."),(0,a.kt)("p",null,"A substring is a contiguous sequence of characters within the string."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: s = "abc"\nOutput: 3\nExplanation: Three palindromic strings: "a", "b", "c".\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: s = "aaa"\nOutput: 6\nExplanation: Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa".\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= s.length <= 1000")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"s consists only of lowercase English letters."))),(0,a.kt)("h2",{id:"solution"},"Solution"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"solution for this question")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"DP solution")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"}," public class Solution {\n     public int countSubstrings(String s) {\n         int n = s.length();\n         int result = 0;\n         boolean[][] dp = new boolean[n][n];\n\n         for(int i = n - 1; i >= 0; i++){\n             for(int j = i; j < n; j++) {\n                 dp[i][j]= s.charAt(i) == s.charAt(j) && (i - j + 1 < 3 || dp[i + 1][j - 1]);\n                 if(dp[i][j]) {\n                     result++;\n                 }\n             }\n         }\n         return result;\n     }\n    public int longestPalindromeSubseq(String s) {\n        int[][] dp = new int[s.length()][s.length()];\n        \n        for (int i = s.length() - 1; i >= 0; i--) {\n            dp[i][i] = 1;\n            for (int j = i+1; j < s.length(); j++) {\n                if (s.charAt(i) == s.charAt(j)) {\n                    dp[i][j] = dp[i+1][j-1] + 2;\n                } else {\n                    dp[i][j] = Math.max(dp[i+1][j], dp[i][j-1]);\n                }\n            }\n        }\n        return dp[0][s.length()-1];\n    }\n}\n")))}c.isMDXComponent=!0}}]);