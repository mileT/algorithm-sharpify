(self.webpackChunkleetcode_notes_doc=self.webpackChunkleetcode_notes_doc||[]).push([[5183],{3905:function(e,r,t){"use strict";t.d(r,{Zo:function(){return s},kt:function(){return d}});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function u(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=n.createContext({}),c=function(e){var r=n.useContext(o),t=r;return e&&(t="function"==typeof e?e(r):u(u({},r),e)),t},s=function(e){var r=c(e.components);return n.createElement(o.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),f=c(t),d=a,y=f["".concat(o,".").concat(d)]||f[d]||p[d]||i;return t?n.createElement(y,u(u({ref:r},s),{},{components:t})):n.createElement(y,u({ref:r},s))}));function d(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,u=new Array(i);u[0]=f;var l={};for(var o in r)hasOwnProperty.call(r,o)&&(l[o]=r[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,u[1]=l;for(var c=2;c<i;c++)u[c]=t[c];return n.createElement.apply(null,u)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},86:function(e,r,t){"use strict";t.r(r),t.d(r,{frontMatter:function(){return u},metadata:function(){return l},toc:function(){return o},default:function(){return s}});var n=t(2122),a=t(9756),i=(t(7294),t(3905)),u={sidebar_label:"2080. Range Frequency Queries",sidebar_position:79},l={unversionedId:"blind-curated-75/79 range frequency queries",id:"blind-curated-75/79 range frequency queries",isDocsHomePage:!1,title:"Leetcode title to be added later",description:"Design a data structure to find the frequency of a given value in a given subarray.",source:"@site/docs/blind-curated-75/79 range frequency queries.md",sourceDirName:"blind-curated-75",slug:"/blind-curated-75/79 range frequency queries",permalink:"/algorithm-sharpify/docs/blind-curated-75/79 range frequency queries",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/blind-curated-75/79 range frequency queries.md",version:"current",sidebar_label:"2080. Range Frequency Queries",sidebarPosition:79,frontMatter:{sidebar_label:"2080. Range Frequency Queries",sidebar_position:79},sidebar:"tutorialSidebar",previous:{title:"Leetcode title to be added later",permalink:"/algorithm-sharpify/docs/blind-curated-75/78 top k frequent words"},next:{title:"12 rotate image",permalink:"/algorithm-sharpify/docs/blind-curated-75/12 rotate image"}},o=[{value:"Example 1:",id:"example-1",children:[]},{value:"Constraints:",id:"constraints",children:[]}],c={toc:o};function s(e){var r=e.components,t=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Design a data structure to find the frequency of a given value in a given subarray."),(0,i.kt)("p",null,"The frequency of a value in a subarray is the number of occurrences of that value in the subarray."),(0,i.kt)("p",null,"Implement the RangeFreqQuery class:"),(0,i.kt)("p",null,"RangeFreqQuery(int[] arr) Constructs an instance of the class with the given 0-indexed integer array arr.\nint query(int left, int right, int value) Returns the frequency of value in the subarray arr","[left...right]",".\nA subarray is a contiguous sequence of elements within an array. arr","[left...right]"," denotes the subarray that contains the elements of nums between indices left and right (inclusive)."),(0,i.kt)("h2",{id:"example-1"},"Example 1:"),(0,i.kt)("p",null,"Input"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'["RangeFreqQuery", "query", "query"]\n[[[12, 33, 4, 56, 22, 2, 34, 33, 22, 12, 34, 56]], [1, 2, 4], [0, 11, 33]]\nOutput\n[null, 1, 2]\n')),(0,i.kt)("p",null,"Explanation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"RangeFreqQuery rangeFreqQuery = new RangeFreqQuery([12, 33, 4, 56, 22, 2, 34, 33, 22, 12, 34, 56]);\nrangeFreqQuery.query(1, 2, 4); // return 1. The value 4 occurs 1 time in the subarray [33, 4]\nrangeFreqQuery.query(0, 11, 33); // return 2. The value 33 occurs 2 times in the whole array.\n")),(0,i.kt)("h2",{id:"constraints"},"Constraints:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= arr.length <= 105")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= arr[i], value <= 104")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0 <= left <= right < arr.length")),(0,i.kt)("li",{parentName:"ul"},"At most 105 calls will be made to query")),(0,i.kt)("h1",{id:"solution"},"Solution"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class RangeFreqQuery {\n    HashMap<Integer, TreeMap<Integer, Integer>> map;\n    public RangeFreqQuery(int[] arr) {\n        map = new HashMap<>();\n        for(int i = 0; i < arr.length; i++) {\n            if(!map.containsKey(arr[i])) {\n                map.put(arr[i], new TreeMap<>());\n            }\n            TreeMap<Integer, Integer> freq = map.get(arr[i]);\n            freq.put(i, freq.size() + 1);\n        }\n    }\n    public int query(int left, int right, int value) {\n        if(!map.containsKey(value)) return 0;\n        TreeMap<Integer, Integer> cur = map.get(value);\n        int leftCt, rightCt = 0;\n        if(cur.floorKey(right) == null) return 0;\n        else rightCt = cur.floorEntry(right).getValue();\n        if(cur.lowerKey(left) != null) leftct = lowerEntry(left).getValue();\n        return rightCt - leftCt;\n    }\n}\n\n")))}s.isMDXComponent=!0}}]);