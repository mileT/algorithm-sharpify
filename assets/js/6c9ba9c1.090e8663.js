(self.webpackChunkleetcode_notes_doc=self.webpackChunkleetcode_notes_doc||[]).push([[4624],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return l},kt:function(){return g}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),d=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=d(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=d(t),g=i,f=p["".concat(c,".").concat(g)]||p[g]||u[g]||o;return t?r.createElement(f,a(a({ref:n},l),{},{components:t})):r.createElement(f,a({ref:n},l))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=p;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var d=2;d<o;d++)a[d]=t[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},9752:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return a},metadata:function(){return s},toc:function(){return c},default:function(){return l}});var r=t(2122),i=t(9756),o=(t(7294),t(3905)),a={sidebar_label:"61. Encode and Decode Strings ",sidebar_position:61},s={unversionedId:"blind-curated-75/61 encode and decode strings",id:"blind-curated-75/61 encode and decode strings",isDocsHomePage:!1,title:"659 Encode and Decode Strings",description:"Design an algorithm to encode a list of strings to a string. The encoded string is then sent over the network and is decoded back to the original list of strings.",source:"@site/docs/blind-curated-75/61 encode and decode strings.md",sourceDirName:"blind-curated-75",slug:"/blind-curated-75/61 encode and decode strings",permalink:"/algorithm-sharpify/docs/blind-curated-75/61 encode and decode strings",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/blind-curated-75/61 encode and decode strings.md",version:"current",sidebar_label:"61. Encode and Decode Strings ",sidebarPosition:61,frontMatter:{sidebar_label:"61. Encode and Decode Strings ",sidebar_position:61},sidebar:"tutorialSidebar",previous:{title:"Lintcode 892 Alien Dictionary",permalink:"/algorithm-sharpify/docs/blind-curated-75/60 alien dictionary"},next:{title:"659 Encode and Decode Strings",permalink:"/algorithm-sharpify/docs/blind-curated-75/62 perfect squares"}},c=[{value:"Solution",id:"solution",children:[]}],d={toc:c};function l(e){var n=e.components,t=(0,i.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Design an algorithm to encode a list of strings to a string. The encoded string is then sent over the network and is decoded back to the original list of strings."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'Input: ["lint","code","love","you"]\nOutput: ["lint","code","love","you"]\nExplanation:\nOne possible encode method is: "lint:;code:;love:;you"\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'Input: ["we", "say", ":", "yes"]\nOutput: ["we", "say", ":", "yes"]\nExplanation:\nOne possible encode method is: "we:;say:;:::;yes"\n')),(0,o.kt)("h2",{id:"solution"},"Solution"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"public class Solution {\n    public String encode(List<String> strs) {\n        StringBuilder sb = new StringBuilder();\n        for(String s : strs) {\n            for(char c : s.toCharArray()) {\n                if(c == ':') {\n                    sb.append(\"::\");\n                } else {\n                    sb.append(c);\n                }\n            }\n            sb.append(\":;\");\n        }\n        return sb.toString();\n    }\n\n    public List<String> decode(String str) {\n        List<String> result = new ArrayList<>();\n        char[] sc = str.toCharArray();\n        StringBuilder item = new StringBuilder();\n        int i = 0;\n        while(i < str.length()) {\n            if(sc[i] == ':') {\n                if(sc[i + 1] == ';') {\n                    result.add(item.toString());\n                    itme = new StringBuilder();\n                    i += 2;\n                } else {\n                    item.append(sc[i + 1]);\n                    i += 2;\n                }\n            } else {\n                item.append(sc[i]);\n                i += 1;\n            }\n        }\n        return result;\n    }\n}\n")))}l.isMDXComponent=!0}}]);