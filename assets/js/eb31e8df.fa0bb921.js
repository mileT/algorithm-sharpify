(self.webpackChunkleetcode_notes_doc=self.webpackChunkleetcode_notes_doc||[]).push([[3872],{3905:function(e,n,r){"use strict";r.d(n,{Zo:function(){return u},kt:function(){return g}});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=t.createContext({}),d=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},u=function(e){var n=d(e.components);return t.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},s=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),s=d(r),g=a,h=s["".concat(c,".").concat(g)]||s[g]||p[g]||i;return r?t.createElement(h,o(o({ref:n},u),{},{components:r})):t.createElement(h,o({ref:n},u))}));function g(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=s;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var d=2;d<i;d++)o[d]=r[d];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}s.displayName="MDXCreateElement"},1154:function(e,n,r){"use strict";r.r(n),r.d(n,{frontMatter:function(){return o},metadata:function(){return l},toc:function(){return c},default:function(){return u}});var t=r(2122),a=r(9756),i=(r(7294),r(3905)),o={sidebar_label:"60. Alien Dictionary - hard",sidebar_position:60},l={unversionedId:"blind-curated-75/60 alien dictionary",id:"blind-curated-75/60 alien dictionary",isDocsHomePage:!1,title:"Lintcode 892 Alien Dictionary",description:"Description",source:"@site/docs/blind-curated-75/60 alien dictionary.md",sourceDirName:"blind-curated-75",slug:"/blind-curated-75/60 alien dictionary",permalink:"/algorithm-sharpify/docs/blind-curated-75/60 alien dictionary",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/blind-curated-75/60 alien dictionary.md",version:"current",sidebar_label:"60. Alien Dictionary - hard",sidebarPosition:60,frontMatter:{sidebar_label:"60. Alien Dictionary - hard",sidebar_position:60},sidebar:"tutorialSidebar",previous:{title:"Lintcode 178 Graph Valid Tree",permalink:"/algorithm-sharpify/docs/blind-curated-75/58 graph valid tree"},next:{title:"659 Encode and Decode Strings",permalink:"/algorithm-sharpify/docs/blind-curated-75/61 encode and decode strings"}},c=[{value:"Solution",id:"solution",children:[{value:"Solution 2",id:"solution-2",children:[]}]}],d={toc:c};function u(e){var n=e.components,r=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,t.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Description\nThere is a new alien language which uses the latin alphabet. However, the order among letters are unknown to you. You receive a list of non-empty words from the dictionary, where words are sorted lexicographically by the rules of this new language. Derive the order of letters in this language."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"You may assume all letters are in lowercase."),(0,i.kt)("li",{parentName:"ol"},"The dictionary is invalid, if a is prefix of b and b is appear before a."),(0,i.kt)("li",{parentName:"ol"},"If the order is invalid, return an empty string."),(0,i.kt)("li",{parentName:"ol"},"There may be multiple valid order of letters, return the smallest in normal lexicographical order")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'Input\uff1a["wrt","wrf","er","ett","rftt"]\nOutput\uff1a"wertf"\nExplanation\uff1a\nfrom "wrt"and"wrf" ,we can get \'t\'<\'f\'\nfrom "wrt"and"er" ,we can get \'w\'<\'e\'\nfrom "er"and"ett" ,we can get \'r\'<\'t\'\nfrom "ett"and"rftt" ,we can get \'e\'<\'r\'\nSo return "wertf"\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'Input\uff1a["z","x"]\nOutput\uff1a"zx"\nExplanation\uff1a\nfrom "z" and "x"\uff0cwe can get \'z\' < \'x\'\nSo return "zx"\n')),(0,i.kt)("h2",{id:"solution"},"Solution"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'class Solution {\n    public String alienOrder(String[] words) {\n        Map<Character, Set<Character>> graph = constructGraph(words);\n        if(graph == null) {\n            return "";\n        }\n        return topologicalSorting(graph);\n    }\n\n    private Map<Character, Set<Character>> constructGraph(String[] words) {\n        Map<Character, Character> graph = new HashMap<>();\n        \n        //create nodes\n        for(int i = 0; i < words.lenght; i++) {\n            for(int j = 0; j < words[i].length(); j++) {\n                char c = words[i].charAt(j);\n                if(!graph.containsKey(c)) {\n                    graph.put(c, new HashSet<Character>());\n                }\n            }\n        }\n\n        //create eges\n        for(int i = 0; i < words.length; i++) {\n            int index = 0;\n            while(index < words[i].length() && index < words[i + 1].length()) {\n                if(words[i].charAt(index) != words[i + 1].charAt(index)) {\n                    graph.get(words[i].charAt(index).add(words[i + 1].charAt(index)));\n                    break;\n                }\n                index++;\n            }\n            if(index == Math.min(words[i].length(), words[i + 1].length())) {\n                if(words[i].length() > words[i + 1].length()) {\n                    return null;\n                }\n            }\n        }\n        return graph;\n    }\n\n    private Map<Character, Integer> getIndegree(Map<Character, Set<Character>> graph) {\n        Map<Character, Integer> indegree = new HashMap<>();\n        for(Character u : graph.keySet()) {\n            indegree.put(u, 0);\n        }\n\n        for(Character u : graph.keySet()) {\n            for(Character v: graph.get(u)) {\n                indegree.put(v, indegree.get(v) + 1);\n            }\n        }\n\n        return indegree;\n    }\n\n    private String topologicalSorting(Map<Character, Set<Character>> graph) {\n        Map<Character, Integer> indgree = getIndegree(graph);\n        Queue<Character> queue = new PriorityQueue<>();\n\n        for(Character u : indegree.keySet()) {\n            if(indgree.get(u) == 0) {\n                queue.offer(u);\n            }\n        }\n\n        StringBuilder sb = new StringBuilder();\n        while(!queue.isEmpty()) {\n            Character head = queue.poll();\n            sb.append(head);\n            for(Character neighbor : graph.get(head)) {\n                indegree.put(neighbor, indegree.get(neighbor) - 1);\n                if(indegree.get(neighbor) == 0) {\n                    queue.offer(neighbor);\n                }\n            }\n        }\n        if(sb.length() != indegree.size()) {\n            return "";\n        }\n        return sb.toString();\n    }\n}\n')),(0,i.kt)("h3",{id:"solution-2"},"Solution 2"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public String alienOrder(String[] words) {\n        Map<Character, Set<Character>> graph = new HashMap<>();\n        int[] inDegree = new int[26];\n        buildGraph(words, graph, inDegree);\n        \n        String order = topologicalSort(graph, inDegree);\n        return order.length() == graph.size() ? order : \"\";\n    }\n    \n    private void buildGraph(String[] words, Map<Character, Set<Character>> graph, int[] inDegree) {\n        for (String word : words) {\n            for (char c : word.toCharArray()) {\n                graph.put(c, new HashSet<>());\n            }\n        }\n        \n        for (int i = 1; i < words.length; i++) {\n            String first = words[i - 1];\n            String second = words[i];\n            int length = Math.min(first.length(), second.length());\n            \n            for (int j = 0; j < length; j++) {\n                char parent = first.charAt(j);\n                char child = second.charAt(j);\n                if (parent != child) {\n                    if (!graph.get(parent).contains(child)) {\n                        graph.get(parent).add(child);\n                        inDegree[child - 'a']++;\n                    }\n                    break;\n                }\n            }\n        }\n    }\n    \n    private String topologicalSort(Map<Character, Set<Character>> graph, int[] inDegree) {\n        Queue<Character> queue = new LinkedList<>();\n        for (char c : graph.keySet()) {\n            if (inDegree[c - 'a'] == 0) {\n                queue.offer(c);\n            }\n        }\n        \n        StringBuilder sb = new StringBuilder();\n        while (!queue.isEmpty()) {\n            char c = queue.poll();\n            sb.append(c);\n            for (char neighbor : graph.get(c)) {\n                inDegree[neighbor - 'a']--;\n                if (inDegree[neighbor - 'a'] == 0) {\n                    queue.offer(neighbor);\n                }\n            }\n        }\n        return sb.toString();\n    }\n}\n")))}u.isMDXComponent=!0}}]);