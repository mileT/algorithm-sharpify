(self.webpackChunkleetcode_notes_doc=self.webpackChunkleetcode_notes_doc||[]).push([[9052],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return p},kt:function(){return m}});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=i.createContext({}),s=function(e){var n=i.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=s(e.components);return i.createElement(u.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=s(t),m=r,f=d["".concat(u,".").concat(m)]||d[m]||c[m]||o;return t?i.createElement(f,l(l({ref:n},p),{},{components:t})):i.createElement(f,l({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=d;var a={};for(var u in n)hasOwnProperty.call(n,u)&&(a[u]=n[u]);a.originalType=e,a.mdxType="string"==typeof e?e:r,l[1]=a;for(var s=2;s<o;s++)l[s]=t[s];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8961:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return l},metadata:function(){return a},toc:function(){return u},default:function(){return p}});var i=t(2122),r=t(9756),o=(t(7294),t(3905)),l={sidebar_label:"347 Top K Frequent Elements",sidebar_position:2},a={unversionedId:"leetcode/leetcode347",id:"leetcode/leetcode347",isDocsHomePage:!1,title:"Top K Frequent Elements",description:"Leetcode Link",source:"@site/docs/leetcode/leetcode347.md",sourceDirName:"leetcode",slug:"/leetcode/leetcode347",permalink:"/algorithm-sharpify/docs/leetcode/leetcode347",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/leetcode/leetcode347.md",version:"current",sidebar_label:"347 Top K Frequent Elements",sidebarPosition:2,frontMatter:{sidebar_label:"347 Top K Frequent Elements",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"N-Queens",permalink:"/algorithm-sharpify/docs/leetcode/leetcode576"},next:{title:"Word Search",permalink:"/algorithm-sharpify/docs/leetcode/leetcode79"}},u=[{value:"Description",id:"description",children:[]},{value:"Solution",id:"solution",children:[{value:"solution 1",id:"solution-1",children:[]},{value:"Solution 2:",id:"solution-2",children:[]}]}],s={toc:u};function p(e){var n=e.components,t=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,i.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/top-k-frequent-elements/"},"Leetcode Link")),(0,o.kt)("h2",{id:"description"},"Description"),(0,o.kt)("p",null,"Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order."),(0,o.kt)("p",null,"Example 1:"),(0,o.kt)("p",null,"Input: nums = ","[1,1,1,2,2,3]",", k = 2\nOutput: ","[1,2]","\nExample 2:"),(0,o.kt)("p",null,"Input: nums = ","[1]",", k = 1\nOutput: ","[1]"),(0,o.kt)("p",null,"Constraints:"),(0,o.kt)("p",null,"1 <= nums.length <= 105\nk is in the range ","[1, the number of unique elements in the array]",".\nIt is guaranteed that the answer is unique."),(0,o.kt)("p",null,"Follow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size."),(0,o.kt)("h2",{id:"solution"},"Solution"),(0,o.kt)("h3",{id:"solution-1"},"solution 1"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    int[] unique;\n    Map<Integer, Integer> count;\n\n    public void swap(int a, int b) {\n        int tmp = unique[a];\n        unique[a] = unique[b];\n        unique[b] = tmp;\n    }\n\n    public int partition(int left, int right, int pivot_index) {\n        int pivot_frequency = count.get(unique[pivot_index]);\n        // 1. move pivot to end\n        swap(pivot_index, right);\n        int store_index = left;\n\n        // 2. move all less frequent elements to the left\n        for (int i = left; i <= right; i++) {\n            if (count.get(unique[i]) < pivot_frequency) {\n                swap(store_index, i);\n                store_index++;\n            }\n        }\n\n        // 3. move pivot to its final place\n        swap(store_index, right);\n\n        return store_index;\n    }\n    \n    public void quickselect(int left, int right, int k_smallest) {\n        /*\n        Sort a list within left..right till kth less frequent element\n        takes its place. \n        */\n\n        // base case: the list contains only one element\n        if (left == right) return;\n        \n        // select a random pivot_index\n        Random random_num = new Random();\n        int pivot_index = left + random_num.nextInt(right - left); \n\n        // find the pivot position in a sorted list\n        pivot_index = partition(left, right, pivot_index);\n\n        // if the pivot is in its final sorted position\n        if (k_smallest == pivot_index) {\n            return;    \n        } else if (k_smallest < pivot_index) {\n            // go left\n            quickselect(left, pivot_index - 1, k_smallest);     \n        } else {\n            // go right \n            quickselect(pivot_index + 1, right, k_smallest);  \n        }\n    }\n    \n    public int[] topKFrequent(int[] nums, int k) {\n        // build hash map : character and how often it appears\n        count = new HashMap();\n        for (int num: nums) {\n            count.put(num, count.getOrDefault(num, 0) + 1);\n        }\n        \n        // array of unique elements\n        int n = count.size();\n        unique = new int[n]; \n        int i = 0;\n        for (int num: count.keySet()) {\n            unique[i] = num;\n            i++;\n        }\n        \n        // kth top frequent element is (n - k)th less frequent.\n        // Do a partial sort: from less frequent to the most frequent, till\n        // (n - k)th less frequent element takes its place (n - k) in a sorted array. \n        // All element on the left are less frequent.\n        // All the elements on the right are more frequent. \n        quickselect(0, n - 1, n - k);\n        // Return top k frequent elements\n        return Arrays.copyOfRange(unique, n - k, n);\n    }\n}\n\n")),(0,o.kt)("h3",{id:"solution-2"},"Solution 2:"),(0,o.kt)("h4",{id:"java-8-note"},"Java 8 note"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"// how to convert List<Integer> to int[]\nList<Integer> list = new ArrayList<Integer>();\n// add elements to list\nlist.stream().mapToInt(Integer::intValue).toArray();\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"// how to swap element in list\nCollections.swap(list, i, j);\n")),(0,o.kt)("p",null,"Quick Select O(n), "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public List<Integer> topKFrequent(int[] nums, int k) {\n        HashMap<Integer, Integer> map = new HashMap<> ();\n        for(int num: nums) {\n            map.put(num, map.getOrDefault(num, 0) + 1);\n        }\n        return quickSelect(map, new ArrayList<Integer>(map.keySet()), 0, map.size() - 1, k);\n    }\n\n    private List<Integer> quickSelect(HashMap<Integer, Integer> map, ArrayList<Integer> keys, int start, int end, int k) {\n        int left = start, right = end;\n        List<Integer> res = new ArrayList<> ();\n\n        while(left < right) {\n            int pivot = partition(map, keys, left, right);\n            if(pivot < k - 1) {\n                left = pivot + 1;\n            } else if(pivot > k - 1) {\n                right = pivot - 1;\n            } else {\n                break;\n            }\n        }\n\n        for(int i = 0; i < k; i++) {\n            res.add(keys.get(i));\n        }\n        return res;\n    }\n\n    private int partition(HashMap<Integer, Integer> map, ArrayList<Integer> keys, int start, int end) {\n        int left = start;\n        int pivot = map.get(keys.get(start));\n        for(int i = start + 1; i <= end; i++) {\n            if(map.get(keys.get(i)) >= pivot) {\n                Collections.swap(keys, i, ++left);\n            }\n        }\n        Collections.swap(keys, start, left);\n        return left;\n    }\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from collections import Counter\nclass Solution:\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n        count = Counter(nums)\n        unique = list(count.keys())\n\n    def partition(left, right, pivot_index) -> int:\n        privot_frequency = count[unique[pivot_index]]\n        unique[pivot_index], unique[right] = unique[right], unique[pivot_index]\n\n        store_index = left\n        for i in range(left, right):\n            if count[unique[i]] < pivot_frequency:\n                unique[store_inde], unique[i]= unique[i], unique[store_index]\n                store_index += 1\n\n        unique[right], unique[store_index] = unique[store_index], unique[right]\n\n        return store_index\n\n    def quickselect(left, right, k) -> None:\n    ```\n")))}p.isMDXComponent=!0}}]);