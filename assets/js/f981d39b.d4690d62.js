(self.webpackChunkleetcode_notes_doc=self.webpackChunkleetcode_notes_doc||[]).push([[5553],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var a=r.createContext({}),d=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=d(e.components);return r.createElement(a.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,a=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=d(n),m=i,g=p["".concat(a,".").concat(m)]||p[m]||c[m]||l;return n?r.createElement(g,s(s({ref:t},u),{},{components:n})):r.createElement(g,s({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,s=new Array(l);s[0]=p;var o={};for(var a in t)hasOwnProperty.call(t,a)&&(o[a]=t[a]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var d=2;d<l;d++)s[d]=n[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9335:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return o},toc:function(){return a},default:function(){return u}});var r=n(2122),i=n(9756),l=(n(7294),n(3905)),s={sidebar_label:"21. Merge Two Sorted Lists",sidebar_position:8},o={unversionedId:"blind-curated-75/9 merge k sorted lists",id:"blind-curated-75/9 merge k sorted lists",isDocsHomePage:!1,title:"9 merge k sorted lists",description:"21. Merge Two Sorted Lists",source:"@site/docs/blind-curated-75/9 merge k sorted lists.md",sourceDirName:"blind-curated-75",slug:"/blind-curated-75/9 merge k sorted lists",permalink:"/algorithm-sharpify/docs/blind-curated-75/9 merge k sorted lists",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/blind-curated-75/9 merge k sorted lists.md",version:"current",sidebar_label:"21. Merge Two Sorted Lists",sidebarPosition:8,frontMatter:{sidebar_label:"21. Merge Two Sorted Lists",sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"8 merge two sorted lsits",permalink:"/algorithm-sharpify/docs/blind-curated-75/8 merge two sorted lsits"},next:{title:"33. Search in Rotated Sorted Array",permalink:"/algorithm-sharpify/docs/blind-curated-75/10 search in rotated sorted array"}},a=[{value:"Solution",id:"solution",children:[{value:"1",id:"1",children:[]},{value:"2",id:"2",children:[]},{value:"Based on merge two lists",id:"based-on-merge-two-lists",children:[]}]}],d={toc:a};function u(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,l.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("ol",{start:21},(0,l.kt)("li",{parentName:"ol"},"Merge Two Sorted Lists")),(0,l.kt)("p",null,"Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example 1:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"Input: l1 = [1,2,4], l2 = [1,3,4]\nOutput: [1,1,2,3,4,4]\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example 2:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"Input: l1 = [], l2 = []\nOutput: []\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example 3:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"Input: l1 = [], l2 = [0]\nOutput: [0]\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Constrains:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The number of nodes in both lists is in the range ",(0,l.kt)("inlineCode",{parentName:"li"},"[0, 50]"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-100 <= Node.val <= 100")),(0,l.kt)("li",{parentName:"ul"},"Both ",(0,l.kt)("inlineCode",{parentName:"li"},"l1")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"l2")," are sorted in non-decreasing order.")),(0,l.kt)("h2",{id:"solution"},"Solution"),(0,l.kt)("h3",{id:"1"},"1"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"public class ListNode {\n    int val;\n    ListNode next;\n    ListNode() {}\n    ListNode(int val) {\n        this.val = val;\n    }\n    ListNode(int val, ListNode next) {\n        this.val = val;\n        this.next = next;\n    }\n}\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        List<Integer> l = new ArrayList<Integer>();\n        for(ListNode node : lists) {\n            while(node != null) {\n                l.add(node.val);\n                node = node.next;\n            }\n        }\n        Collections.sort(l);\n        ListNode head = new ListNode(0);\n        ListNode h = head;\n        for(int i : l) {\n            ListNode temp = new ListNode(i);\n            h.next = temp;\n            h = h.next;\n        }\n        h.next = null;\n        return head.next;\n    }\n}\n")),(0,l.kt)("h3",{id:"2"},"2"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"}," public ListNode mergeKLists(ListNode[] lists) {\n     int minIndex = 0;\n     ListNode head = new ListNode(0);\n     ListNode h = head;\n     while(true) {\n         boolean isBreak = true;\n         int min = Integer.MAX_VALUE;\n         for(int i = 0; i <lists.length; i++) {\n             if(lists[i] != null) {\n                 if(lists[i].val < min) {\n                     minIndex = i;\n                     min = lists[i].val;\n                 }\n                 isBreak = false;\n             }\n         }\n         if(isBreak) {\n             break;\n         }\n         ListNode a = new ListNode(lists[minIndex].val);\n         h.next = a;\n         h = h.next;\n         lists[minIndex] = lists[minIndex].next;\n     }\n     h.next = null;\n     return head.next;\n }\n")),(0,l.kt)("h3",{id:"based-on-merge-two-lists"},"Based on merge two lists"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"public ListNode mergeKLists(ListNode[] lists) {\n    if(lists == null || lists.length == 0) {\n        return null;\n    }\n    return mergeKLists(lists, 0, lists.length - 1);\n}\n\nprivate ListNode mergeKLists(ListNode[] lists, int start, int end) {\n    if(start == end) {\n        return lists[start];\n    } else if(start < end) {\n        int mid = (end - start) / 2 + start;\n        ListNode left = mergeKLists(lists, start, mid);\n        ListNode right = mergeKLists(lists, mid + 1, end);\n        return merge(left, right);\n    } else {\n        return null;\n    }\n}\nprivate ListNode merge(ListNode l1, ListNode l2) {\n    if(l1 == null) return l2;\n    if(l2 == null) return l1;\n    if(l1.val < l2.val) {\n        l1.next = merge(l1.next, l2);\n        return l1;\n    } else {\n        l2.next = merge(l1, l2.next);\n        return l2;\n    }\n\n}\n")))}u.isMDXComponent=!0}}]);