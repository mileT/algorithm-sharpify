(self.webpackChunkleetcode_notes_doc=self.webpackChunkleetcode_notes_doc||[]).push([[298],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),f=i,m=d["".concat(l,".").concat(f)]||d[f]||c[f]||o;return n?r.createElement(m,a(a({ref:t},u),{},{components:n})):r.createElement(m,a({ref:t},u))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5231:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return a},metadata:function(){return s},toc:function(){return l},default:function(){return u}});var r=n(2122),i=n(9756),o=(n(7294),n(3905)),a={sidebar_label:"77 K Closest Points to Origin",sidebar_position:77},s={unversionedId:"blind-curated-75/77 k closest points to orgin",id:"blind-curated-75/77 k closest points to orgin",isDocsHomePage:!1,title:"516. 973. K Closest Points to Origin",description:"Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).",source:"@site/docs/blind-curated-75/77 k closest points to orgin.md",sourceDirName:"blind-curated-75",slug:"/blind-curated-75/77 k closest points to orgin",permalink:"/algorithm-sharpify/docs/blind-curated-75/77 k closest points to orgin",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/blind-curated-75/77 k closest points to orgin.md",version:"current",sidebar_label:"77 K Closest Points to Origin",sidebarPosition:77,frontMatter:{sidebar_label:"77 K Closest Points to Origin",sidebar_position:77},sidebar:"tutorialSidebar",previous:{title:"Question",permalink:"/algorithm-sharpify/docs/blind-curated-75/recommend businesses yelp oa1"},next:{title:"Leetcode title to be added later",permalink:"/algorithm-sharpify/docs/blind-curated-75/78 top k frequent words"}},l=[],p={toc:l};function u(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Given an array of points where points","[i]"," = ","[xi, yi]"," represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0)."),(0,o.kt)("p",null,"The distance between two points on the X-Y plane is the Euclidean distance (i.e., \u221a(x1 - x2)2 + (y1 - y2)2)."),(0,o.kt)("p",null,"You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in)."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: points = [[1,3],[-2,2]], k = 1\nOutput: [[-2,2]]\nExplanation:\nThe distance between (1, 3) and the origin is sqrt(10).\nThe distance between (-2, 2) and the origin is sqrt(8).\nSince sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.\nWe only want the closest k = 1 points from the origin, so the answer is just [[-2,2]].\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: points = [[3,3],[5,-1],[-2,4]], k = 2\nOutput: [[3,3],[-2,4]]\nExplanation: The answer [[-2,4],[3,3]] would also be accepted.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"1 <= k <= points.length <= 104"),(0,o.kt)("li",{parentName:"ul"},"-104 < xi, yi < 104")),(0,o.kt)("h1",{id:"solution-1-use--max-heap"},"Solution 1, use  max heap"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"\nclass Solution {\n    public int[][] kClosest(int[][] points, int K) {\n        int[][] result = new int[K][2];\n        PriorityQueue<int[]> heap = new PriorityQueue<int[]>(K, (a, b) -> (\n            (b[0] * b[0] + b[1] * b[1] - a[0] * a[0] - a[1] * a[1]);\n        ));\n\n        int size = 0;\n        for(int[] point : points) {\n            heap.offer(point);\n            size++;\n            if(size > K) {\n                heap.poll();\n                size--;\n            }\n        }\n\n        for(int i = 0; i < K; i++) {\n            result[i] = heap.poll();\n        }\n\n        return result;\n    }\n}\n")),(0,o.kt)("h1",{id:"solution-2-select-sort"},"Solution 2, select sort"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public int[][] kClose(int[][] points, int K) {\n\n    }\n    private int helper(int[][] A, int l, int r) [\n        int[] pivot = A[l];\n        while(l < r) {\n            while(l < r && compare(A[r], pivot) >= 0) {\n                r--;\n            }\n            A[l] = A[r];\n            while(l <r && compare(A[l],pivot) <= 0) {\n                l++;\n            }\n            A[r] = A[l];\n        }\n        A[l] = pivot;\n        return l;\n    ]\n    private int compare(int[] p, int[] q) {\n        return p[0] * p[0] + p[1] * p[1] - q[0] * q[0] - q[1] * q[1]; \n    }\n}\n")))}u.isMDXComponent=!0}}]);