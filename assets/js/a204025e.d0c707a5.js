(self.webpackChunkleetcode_notes_doc=self.webpackChunkleetcode_notes_doc||[]).push([[6994],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return m},kt:function(){return c}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),p=u(n),c=i,h=p["".concat(s,".").concat(c)]||p[c]||d[c]||a;return n?r.createElement(h,l(l({ref:t},m),{},{components:n})):r.createElement(h,l({ref:t},m))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var u=2;u<a;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2778:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return o},toc:function(){return s},default:function(){return m}});var r=n(2122),i=n(9756),a=(n(7294),n(3905)),l={sidebar_label:"153 Find Minimum in Rotated Sorted Array",sidebar_position:153},o={unversionedId:"leetcode/leetcode153",id:"leetcode/leetcode153",isDocsHomePage:!1,title:"Find Minimum in Rotated Sorted Array",description:"Description",source:"@site/docs/leetcode/leetcode153.md",sourceDirName:"leetcode",slug:"/leetcode/leetcode153",permalink:"/algorithm-sharpify/docs/leetcode/leetcode153",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/leetcode/leetcode153.md",version:"current",sidebar_label:"153 Find Minimum in Rotated Sorted Array",sidebarPosition:153,frontMatter:{sidebar_label:"153 Find Minimum in Rotated Sorted Array",sidebar_position:153},sidebar:"tutorialSidebar",previous:{title:"Reverse Linked List II",permalink:"/algorithm-sharpify/docs/leetcode/leetcode92"},next:{title:"211. Design Add and Search Words Data Structure",permalink:"/algorithm-sharpify/docs/leetcode/leetcode211"}},s=[{value:"Description",id:"description",children:[]},{value:"Solution",id:"solution",children:[]},{value:"Code",id:"code",children:[{value:"solution 1",id:"solution-1",children:[]}]}],u={toc:s};function m(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"description"},"Description"),(0,a.kt)("p",null,"Suppose an array of length ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," sorted in ascending order is rotated between ",(0,a.kt)("inlineCode",{parentName:"p"},"1")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," times. For example, the array ",(0,a.kt)("inlineCode",{parentName:"p"},"nums = [0,1,2,4,5,6,7]")," might become:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"[4,5,6,7,0,1,2]"," if it was rotated 4 times."),(0,a.kt)("li",{parentName:"ul"},"[0,1,2,4,5,6,7]"," if it was rotated 7 times.")),(0,a.kt)("p",null,"Notice that rotating an array ",(0,a.kt)("inlineCode",{parentName:"p"},"[a[0], a[1], a[2], ..., a[n-1]]")," 1 time results in the array ",(0,a.kt)("inlineCode",{parentName:"p"},"[a[n-1], a[0], a[1], a[2], ..., a[n-2]]"),"."),(0,a.kt)("p",null,"Given the sorted rotated array nums of unique elements, return the minimum element of this array."),(0,a.kt)("p",null,"You must write an algorithm that runs in ",(0,a.kt)("inlineCode",{parentName:"p"},"O(log n)")," time."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"}," Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"Input: nums = [3,4,5,1,2]\nOutput: 1\nExplanation: The original array was [1,2,3,4,5] rotated 3 times.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"}," Example 2: ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"Input: nums = [4,5,6,7,0,1,2]\nOutput: 0\nExplanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"}," Example 3: ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"Input: nums = [11,13,15,17]\nOutput: 11\nExplanation: The original array was [11,13,15,17] and it was rotated 4 times. \n")),(0,a.kt)("p",null,"Constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"n == nums.length")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= n <= 5000")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-5000 <= nums[i] <= 5000")),(0,a.kt)("li",{parentName:"ul"},"All the integers of nums are unique."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"nums")," is sorted and rotated between ",(0,a.kt)("inlineCode",{parentName:"li"},"1")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"n")," times.")),(0,a.kt)("h2",{id:"solution"},"Solution"),(0,a.kt)("h2",{id:"code"},"Code"),(0,a.kt)("h3",{id:"solution-1"},"solution 1"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n  public int findMin(int[] nums) {\n    // If the list has just one element then return that element.\n    if (nums.length == 1) {\n      return nums[0];\n    }\n\n    // initializing left and right pointers.\n    int left = 0, right = nums.length - 1;\n\n    // if the last element is greater than the first element then there is no rotation.\n    // e.g. 1 < 2 < 3 < 4 < 5 < 7. Already sorted array.\n    // Hence the smallest element is first element. A[0]\n    if (nums[right] > nums[0]) {\n      return nums[0];\n    }\n    \n    // Binary search way\n    while (right >= left) {\n      // Find the mid element\n      int mid = left + (right - left) / 2;\n\n      // if the mid element is greater than its next element then mid+1 element is the smallest\n      // This point would be the point of change. From higher to lower value.\n      if (nums[mid] > nums[mid + 1]) {\n        return nums[mid + 1];\n      }\n\n      // if the mid element is lesser than its previous element then mid element is the smallest\n      if (nums[mid - 1] > nums[mid]) {\n        return nums[mid];\n      }\n\n      // if the mid elements value is greater than the 0th element this means\n      // the least value is still somewhere to the right as we are still dealing with elements\n      // greater than nums[0]\n      if (nums[mid] > nums[0]) {\n        left = mid + 1;\n      } else {\n        // if nums[0] is greater than the mid value then this means the smallest value is somewhere to\n        // the left\n        right = mid - 1;\n      }\n    }\n    return -1;\n  }\n}\n")))}m.isMDXComponent=!0}}]);